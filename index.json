[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "kind": "index",
    "content": "![Mux Node Banner](github-nodejs-sdk.png)\n\n# Mux Node\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects, supporting both Mux Data and Mux Video.\n\n[Mux Video](https://mux.com/video) is an API-first platform, powered by data and designed by video experts to make beautiful video possible for every development team.\n\n[Mux Data](https://mux.com/data) is a platform for monitoring your video streaming performance with just a few lines of code. Get in-depth quality of service analytics on web, mobile, and OTT devices.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. **Please note** that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n\n```\nnpm install @mux/mux-node --save\n```\n\nor\n\n```\nyarn add @mux/mux-node\n```\n\n## Usage\n\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\n\n// make it possible to read credentials from .env files\nconst dotenv = require('dotenv');\ndotenv.config();\n\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n\n```javascript\n// Create an asset\nconst asset = await Video.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n  \"playback_policy\": [\n    \"public\" // makes playback ID available on the asset\n  ],\n});\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst fs = require('fs')\nconst fetch = require('node-fetch');\nlet upload = await Video.Uploads.create({\n  new_asset_settings: { playback_policy: 'public' },\n});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nconst readStream = await fs.createReadStream('/path/to/your/file');\nawait fetch(upload.url, { method: 'PUT', body: readStream });\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Uploads.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.Metrics.breakdown('aggregate_startup_time', {\n  group_by: 'browser',\n});\n```\n\n## Usage Details\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n}).then((asset) => {\n  /* Do things with the asset */\n});\n```\n\n## Verifying Webhook Signatures\n\nVerifying Webhook Signatures is _optional_. Learn more in our [Webhook Security Guide](https://docs.mux.com/docs/webhook-security)\n\n```javascript\n/*\n  If the header is valid, this will return `true`\n  If invalid, this will throw one of the following errors:\n    * new Error('Unable to extract timestamp and signatures from header')\n    * new Error('No signatures found with expected scheme');\n    * new Error('No signatures found matching the expected signature for payload.')\n    * new Error('Timestamp outside the tolerance zone')\n*/\n\n/*\n  `rawBody` is the raw request body. It should be a string representation of a JSON object.\n  `header` is the value in request.headers['mux-signature']\n  `secret` is the signing secret for this configured webhook. You can find that in your webhooks dashboard\n           (note that this secret is different than your API Secret Key)\n*/\n\nMux.Webhooks.verifyHeader(rawBody, header, secret);\n```\n\nNote that when passing in the payload (`rawBody`) you want to pass in the raw un-parsed request body, not the parsed JSON.\nHere's an example if you are using express.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n/**\n * You'll need to make sure this is externally accessible.  ngrok (https://ngrok.com/)\n * makes this really easy.\n */\n\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst app = express();\n\napp.post(\n  '/webhooks',\n  bodyParser.raw({ type: 'application/json' }),\n  async (req, res) => {\n    try {\n      const sig = req.headers['mux-signature'];\n      // will raise an exception if the signature is invalid\n      const isValidSignature = Webhooks.verifyHeader(\n        req.body,\n        sig,\n        webhookSecret\n      );\n      console.log('Success:', isValidSignature);\n      // convert the raw req.body to JSON, which is originally Buffer (raw)\n      const jsonFormattedBody = JSON.parse(req.body);\n      // await doSomething();\n      res.json({ received: true });\n    } catch (err) {\n      // On error, return the error message\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n  }\n);\n\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n## JWT Helpers <small>([API Reference](https://muxinc.github.io/mux-node-sdk/class/src/utils/jwt.js~JWT.html))</small>\n\nYou can use any JWT-compatible library, but we've included some light helpers in the SDK to make it easier to get up and running.\n\n```javascript\n// Assuming you have your signing key specified in your environment variables:\n// Signing token ID: process.env.MUX_SIGNING_KEY\n// Signing token secret: process.env.MUX_PRIVATE_KEY\n\n// Most simple request, defaults to type video and is valid for 7 days.\nconst token = Mux.JWT.sign('some-playback-id');\n// https://stream.mux.com/some-playback-id.m3u8?token=${token}\n\n// If you wanted to sign a thumbnail\nconst thumbParams = { time: 14, width: 100 };\nconst thumbToken = Mux.JWT.sign('some-playback-id', {\n  type: 'thumbnail',\n  params: thumbParams,\n});\n// https://image.mux.com/some-playback-id/thumbnail.jpg?token=${token}\n\n// If you wanted to sign a gif\nconst gifToken = Mux.JWT.sign('some-playback-id', { type: 'gif' });\n// https://image.mux.com/some-playback-id/animated.gif?token=${token}\n\n// And, an example for a storyboard\nconst storyboardToken = Mux.JWT.sign('some-playback-id', {\n  type: 'storyboard',\n});\n// https://image.mux.com/some-playback-id/storyboard.jpg?token=${token}\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', (req) => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', (res) => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `yarn test` or `yarn test:unit`\n\nRun integration tests: `yarn test:int` - this will run integration tests with `nock` and `NOCK_BACK_MODE` set to `record`. This means that previously recorded API requests will be stubbed and any missing ones will be recorded.\n\nYou can also run integration tests with real requests by running `yarn test:int:wild`. Make sure you have `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` set as environment variables so your requests are authenticated. This is useful to run locally to verify that actual API requests work as expected. When running the whole suite locally you might run into Mux API rate limits so keep that in mind.\n\n**Pro Tip** Use mocha `-g` option to run only a specific test or group of tests. For example: `yarn test -g 'creates a new Assets'`.\n\nTo generate the ESDocs, run:\n\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n\nRunning integration tests will require a Mux account with valid seed data for `/video` and `/data` endpoints. If you are contributing and you don't have this, please add unit test coverage and someone from the Mux will help get integration tests added if necessary.\n",
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@mux/mux-node\",\n  \"version\": \"5.0.0-rc.1\",\n  \"description\": \"Mux API wrapper\",\n  \"keywords\": [\n    \"mux\",\n    \"video\",\n    \"video encoding\",\n    \"video transcoding\",\n    \"api\",\n    \"video analytics\",\n    \"live streaming\"\n  ],\n  \"author\": \"Mux <help@mux.com> (https://mux.com/)\",\n  \"main\": \"dist\",\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"watch\": \"yarn run -s build --watch\",\n    \"docs\": \"esdoc\",\n    \"test\": \"yarn build && mocha --recursive ./test\",\n    \"test:unit\": \"yarn build && mocha --recursive ./test/unit\",\n    \"test:int\": \"NOCK_BACK_MODE=record mocha --recursive ./test/integration --timeout 10000\",\n    \"test:int:wild\": \"NOCK_BACK_MODE=wild mocha --recursive ./test/integration --timeout 10000\",\n    \"format\": \"eslint src/** test/** --no-error-on-unmatched-pattern\",\n    \"lint\": \"yarn format\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.25.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"jsonwebtoken\": \"^8.5.1\"\n  },\n  \"devDependencies\": {\n    \"@types/jsonwebtoken\": \"^8.5.8\",\n    \"@types/node\": \"^17.0.10\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.10.0\",\n    \"@typescript-eslint/parser\": \"^5.10.0\",\n    \"chai\": \"^4.3.4\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-node\": \"^1.0.5\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^8.7.0\",\n    \"eslint-config-airbnb-base\": \"^15.0.0\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-plugin-chai-friendly\": \"^0.7.2\",\n    \"eslint-plugin-import\": \"^2.25.4\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"mocha\": \"^9.1.4\",\n    \"moxios\": \"^0.4.0\",\n    \"nock\": \"^13.2.2\",\n    \"prettier\": \"^2.5.1\",\n    \"sinon\": \"^12.0.1\",\n    \"typescript\": \"^4.5.4\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/muxinc/mux-node-sdk.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/muxinc/mux-node-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/muxinc/mux-node-sdk#readme\"\n}\n",
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "![Mux Node Banner](github-nodejs-sdk.png)\n\n# Mux Node\n\n![build status](https://api.travis-ci.org/muxinc/mux-node-sdk.svg?branch=master) ![npm version](https://badge.fury.io/js/%40mux%2Fmux-node.svg)\n\nOfficial Mux API wrapper for Node projects, supporting both Mux Data and Mux Video.\n\n[Mux Video](https://mux.com/video) is an API-first platform, powered by data and designed by video experts to make beautiful video possible for every development team.\n\n[Mux Data](https://mux.com/data) is a platform for monitoring your video streaming performance with just a few lines of code. Get in-depth quality of service analytics on web, mobile, and OTT devices.\n\nThis library is intended to provide Mux API convenience methods for applications written in server-side Javascript. **Please note** that this package uses Mux access tokens and secret keys and is intended to be used in server-side code only.\n\nNot familiar with Mux? Check out https://mux.com/ for more information.\n\n## Documentation\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk)\n\n## Installation\n\n```\nnpm install @mux/mux-node --save\n```\n\nor\n\n```\nyarn add @mux/mux-node\n```\n\n## Usage\n\nTo start, you will need a Mux access token and secret for your Mux environment. For more information on where to get\nan access token, visit the Mux Getting Started guide https://docs.mux.com/docs\n\nRequire the `@mux/mux-node` npm module and create a Mux instance. Your Mux instance will have `Data` and `Video` properties\nthat will allow you to access the Mux Data and Video APIs.\n\n```javascript\nconst Mux = require('@mux/mux-node');\n\n// make it possible to read credentials from .env files\nconst dotenv = require('dotenv');\ndotenv.config();\n\nconst { Video, Data } = new Mux(accessToken, secret);\n```\n\nIf a token ID and secret aren't included as parameters, the SDK will attempt to use the `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` environment variables.\n\n```javascript\n// assume process.env.MUX_TOKEN_ID and process.env.MUX_TOKEN_SECRET contain your credentials\nconst muxClient = new Mux(); // Success!\n```\n\nAs an example, you can create a Mux asset and playback ID by using the below functions on your Video instance.\n\n```javascript\n// Create an asset\nconst asset = await Video.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n  \"playback_policy\": [\n    \"public\" // makes playback ID available on the asset\n  ],\n});\n```\n\nOr, if you don't have the files online already, you can ingest one via the direct uploads API.\n\n```javascript\nconst fs = require('fs')\nconst fetch = require('node-fetch');\nlet upload = await Video.Uploads.create({\n  new_asset_settings: { playback_policy: 'public' },\n});\n\n// The URL you get back from the upload API is resumable, and the file can be uploaded using a `PUT` request (or a series of them).\nconst readStream = await fs.createReadStream('/path/to/your/file');\nawait fetch(upload.url, { method: 'PUT', body: readStream });\n\n// The upload may not be updated immediately, but shortly after the upload is finished you'll get a `video.asset.created` event and the upload will now have a status of `asset_created` and a new `asset_id` key.\nlet updatedUpload = await Video.Uploads.get(upload.id);\n\n// Or you could decide to go get additional information about that new asset you created.\nlet asset = await Video.Assets.get(updatedUpload['asset_id']);\n```\n\nYou can access the Mux Data API in the same way by using your Data instance. For example, you can list all of the\nvalues across every breakdown for the `aggregate_startup_time` metric by using the below function.\n\n```javascript\nconst breakdown = await Data.Metrics.breakdown('aggregate_startup_time', {\n  group_by: 'browser',\n});\n```\n\n## Usage Details\n\nEvery function will return a chainable [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n```javascript\nVideo.Assets.create({\n  input: 'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4',\n}).then((asset) => {\n  /* Do things with the asset */\n});\n```\n\n## Verifying Webhook Signatures\n\nVerifying Webhook Signatures is _optional_. Learn more in our [Webhook Security Guide](https://docs.mux.com/docs/webhook-security)\n\n```javascript\n/*\n  If the header is valid, this will return `true`\n  If invalid, this will throw one of the following errors:\n    * new Error('Unable to extract timestamp and signatures from header')\n    * new Error('No signatures found with expected scheme');\n    * new Error('No signatures found matching the expected signature for payload.')\n    * new Error('Timestamp outside the tolerance zone')\n*/\n\n/*\n  `rawBody` is the raw request body. It should be a string representation of a JSON object.\n  `header` is the value in request.headers['mux-signature']\n  `secret` is the signing secret for this configured webhook. You can find that in your webhooks dashboard\n           (note that this secret is different than your API Secret Key)\n*/\n\nMux.Webhooks.verifyHeader(rawBody, header, secret);\n```\n\nNote that when passing in the payload (`rawBody`) you want to pass in the raw un-parsed request body, not the parsed JSON.\nHere's an example if you are using express.\n\n```javascript\nconst Mux = require('@mux/mux-node');\nconst { Webhooks } = Mux;\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n/**\n * You'll need to make sure this is externally accessible.  ngrok (https://ngrok.com/)\n * makes this really easy.\n */\n\nconst webhookSecret = process.env.WEBHOOK_SECRET;\nconst app = express();\n\napp.post(\n  '/webhooks',\n  bodyParser.raw({ type: 'application/json' }),\n  async (req, res) => {\n    try {\n      const sig = req.headers['mux-signature'];\n      // will raise an exception if the signature is invalid\n      const isValidSignature = Webhooks.verifyHeader(\n        req.body,\n        sig,\n        webhookSecret\n      );\n      console.log('Success:', isValidSignature);\n      // convert the raw req.body to JSON, which is originally Buffer (raw)\n      const jsonFormattedBody = JSON.parse(req.body);\n      // await doSomething();\n      res.json({ received: true });\n    } catch (err) {\n      // On error, return the error message\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n  }\n);\n\napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n## JWT Helpers <small>([API Reference](https://muxinc.github.io/mux-node-sdk/class/src/utils/jwt.js~JWT.html))</small>\n\nYou can use any JWT-compatible library, but we've included some light helpers in the SDK to make it easier to get up and running.\n\n```javascript\n// Assuming you have your signing key specified in your environment variables:\n// Signing token ID: process.env.MUX_SIGNING_KEY\n// Signing token secret: process.env.MUX_PRIVATE_KEY\n\n// Most simple request, defaults to type video and is valid for 7 days.\nconst token = Mux.JWT.sign('some-playback-id');\n// https://stream.mux.com/some-playback-id.m3u8?token=${token}\n\n// If you wanted to sign a thumbnail\nconst thumbParams = { time: 14, width: 100 };\nconst thumbToken = Mux.JWT.sign('some-playback-id', {\n  type: 'thumbnail',\n  params: thumbParams,\n});\n// https://image.mux.com/some-playback-id/thumbnail.jpg?token=${token}\n\n// If you wanted to sign a gif\nconst gifToken = Mux.JWT.sign('some-playback-id', { type: 'gif' });\n// https://image.mux.com/some-playback-id/animated.gif?token=${token}\n\n// And, an example for a storyboard\nconst storyboardToken = Mux.JWT.sign('some-playback-id', {\n  type: 'storyboard',\n});\n// https://image.mux.com/some-playback-id/storyboard.jpg?token=${token}\n```\n\n## `request` and `response` events\n\nThe SDK returns the `data` key for every object, because in the Mux API that's always the thing you actually want to see. Sometimes, however, it's useful to see more details about the request being made or the full response object. You can listen for `request` and `response` events to get these raw objects.\n\n```javascript\nmuxClient.on('request', (req) => {\n  // Request will contain everything being sent such as `headers, method, base url, etc\n});\n\nmuxClient.on('response', (res) => {\n  // Response will include everything returned from the API, such as status codes/text, headers, etc\n});\n```\n\nSee the [Mux-Node docs](https://muxinc.github.io/mux-node-sdk/identifiers.html) for a list of all available functions.\n\n## Development\n\nRun unit tests: `yarn test` or `yarn test:unit`\n\nRun integration tests: `yarn test:int` - this will run integration tests with `nock` and `NOCK_BACK_MODE` set to `record`. This means that previously recorded API requests will be stubbed and any missing ones will be recorded.\n\nYou can also run integration tests with real requests by running `yarn test:int:wild`. Make sure you have `MUX_TOKEN_ID` and `MUX_TOKEN_SECRET` set as environment variables so your requests are authenticated. This is useful to run locally to verify that actual API requests work as expected. When running the whole suite locally you might run into Mux API rate limits so keep that in mind.\n\n**Pro Tip** Use mocha `-g` option to run only a specific test or group of tests. For example: `yarn test -g 'creates a new Assets'`.\n\nTo generate the ESDocs, run:\n\n```\nyarn esdoc\nopen ./docs/index.html\n```\n\n## Contributing\n\nFind a bug or want to add a useful feature? That'd be amazing! If you'd like to submit a [pull request](https://help.github.com/articles/about-pull-requests/) to the project with changes, please do something along these lines:\n\n1. Fork the project wherever you'd like\n2. Create a meaningful branch name that relates to your contribution. Consider including an issue number if available. `git co -b add-node-lts-support`\n3. Make any changes you'd like in your forked branch.\n4. Add any relevant tests for your changes\n5. Open the pull request! :tada:\n\nRunning integration tests will require a Mux account with valid seed data for `/video` and `/data` endpoints. If you are contributing and you don't have this, please add unit test coverage and someone from the Mux will help get integration tests added if necessary.\n",
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "test overview\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 48,
    "kind": "testFile",
    "name": "test/integration/data/errors.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Errors} */\ndescribe('Integration::Errors', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {Errors.list} */\n  describe('Errors.list', () => {\n    /** @test {Errors.list} */\n    it('Returns a list of playback errors', async () => {\n      const { nockDone } = await nockBack('Errors/list.json');\n      const resp = await Data.Errors.list({\n        filters: ['operating_system:linux'],\n      });\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/integration/data/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/errors.spec.js~describe0",
    "access": null,
    "description": "Integration::Errors",
    "lineNumber": 7,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 50,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/integration/data/errors.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/errors.spec.js~describe0.describe1",
    "access": null,
    "description": "Errors.list",
    "lineNumber": 12,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 51,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/integration/data/errors.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/errors.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "Returns a list of playback errors",
    "lineNumber": 14,
    "testTargets": [
      "Errors.list"
    ]
  },
  {
    "__docId__": 52,
    "kind": "testFile",
    "name": "test/integration/data/exports.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Exports} */\ndescribe('Integration::Exports', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {Exports.list} */\n  describe('Exports.list', () => {\n    /** @test {Exports.list} */\n    it('Lists the available video view exports along with URLs to retrieve them', async () => {\n      const { nockDone } = await nockBack('Exports/list.json');\n      const resp = await Data.Exports.list();\n      expect(resp.data).to.be.an('array');\n      expect(resp.total_row_count).to.be.greaterThan(6); // we should have 7 or 8\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/exports.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/integration/data/exports.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/exports.spec.js~describe3",
    "access": null,
    "description": "Integration::Exports",
    "lineNumber": 7,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 54,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "test/integration/data/exports.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/exports.spec.js~describe3.describe4",
    "access": null,
    "description": "Exports.list",
    "lineNumber": 12,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 55,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/integration/data/exports.spec.js~describe3.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/exports.spec.js~describe3.describe4.it5",
    "access": null,
    "description": "Lists the available video view exports along with URLs to retrieve them",
    "lineNumber": 14,
    "testTargets": [
      "Exports.list"
    ]
  },
  {
    "__docId__": 56,
    "kind": "testFile",
    "name": "test/integration/data/filters.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Filters} */\ndescribe('Integration::Filters', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {Filters.list} */\n  describe('Filters.list', () => {\n    /** @test {Filters.list} */\n    it('Lists all the filters broken out into basic and advanced', async () => {\n      const { nockDone } = await nockBack('Filters/list.json');\n      const resp = await Data.Filters.list();\n      expect(resp.timeframe).to.be.an('array');\n      expect(resp.data.basic).to.be.an('array');\n      expect(resp.data.advanced).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Filters.get} */\n  describe('Filters.get', () => {\n    /** @test {Filters.get} */\n    it('Lists the values for a filter along with a total count of related views', async () => {\n      const { nockDone } = await nockBack('Filters/get.json');\n      const resp = await Data.Filters.get('browser');\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/filters.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/integration/data/filters.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/filters.spec.js~describe6",
    "access": null,
    "description": "Integration::Filters",
    "lineNumber": 7,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 58,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/integration/data/filters.spec.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/filters.spec.js~describe6.describe7",
    "access": null,
    "description": "Filters.list",
    "lineNumber": 12,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 59,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/integration/data/filters.spec.js~describe6.describe7",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/filters.spec.js~describe6.describe7.it8",
    "access": null,
    "description": "Lists all the filters broken out into basic and advanced",
    "lineNumber": 14,
    "testTargets": [
      "Filters.list"
    ]
  },
  {
    "__docId__": 60,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/integration/data/filters.spec.js~describe6",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/filters.spec.js~describe6.describe9",
    "access": null,
    "description": "Filters.get",
    "lineNumber": 25,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 61,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/integration/data/filters.spec.js~describe6.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/filters.spec.js~describe6.describe9.it10",
    "access": null,
    "description": "Lists the values for a filter along with a total count of related views",
    "lineNumber": 27,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 62,
    "kind": "testFile",
    "name": "test/integration/data/incidents.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Incidents} */\ndescribe('Integration::Incidents', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {Incidents.list} */\n  describe('Incidents.list', () => {\n    /** @test {Incidents.list} */\n    it('Returns a list of open incidents', async () => {\n      const { nockDone } = await nockBack('Incidents/list.json');\n      const resp = await Data.Incidents.list({\n        status: 'open',\n      });\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/incidents.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/integration/data/incidents.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/incidents.spec.js~describe11",
    "access": null,
    "description": "Integration::Incidents",
    "lineNumber": 7,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 64,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/integration/data/incidents.spec.js~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/incidents.spec.js~describe11.describe12",
    "access": null,
    "description": "Incidents.list",
    "lineNumber": 12,
    "testTargets": [
      "Incidents.list"
    ]
  },
  {
    "__docId__": 65,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/integration/data/incidents.spec.js~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/incidents.spec.js~describe11.describe12.it13",
    "access": null,
    "description": "Returns a list of open incidents",
    "lineNumber": 14,
    "testTargets": [
      "Incidents.list"
    ]
  },
  {
    "__docId__": 66,
    "kind": "testFile",
    "name": "test/integration/data/metrics.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Metrics} */\ndescribe('Integration::Metrics', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {Metrics.breakdown} */\n  describe('Metrics.breakdown', () => {\n    /** @test {Metrics.breakdown} */\n    it('Lists all of the values across every breakdown for a specific metric', async () => {\n      const { nockDone } = await nockBack('Metrics/breakdown.json');\n      const resp = await Data.Metrics.breakdown('aggregate_startup_time', {\n        group_by: 'browser',\n      });\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Metrics.comparision} */\n  describe('Metrics.comparision', () => {\n    /** @test {Metrics.comparision} */\n    it('Lists the breakdown values for a specific metric', async () => {\n      const { nockDone } = await nockBack('Metrics/comparison.json');\n      const resp = await Data.Metrics.comparison({\n        value: 'Safari',\n        dimension: 'browser',\n      });\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Metrics.insights} */\n  describe('Metrics.insights', () => {\n    /** @test {Metrics.insights} */\n    it('Returns a list of insights for a metric', async () => {\n      const { nockDone } = await nockBack('Metrics/insights.json');\n      const resp = await Data.Metrics.insights('video_startup_time');\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Metrics.overall} */\n  describe('Metrics.overall', () => {\n    /** @test {Metrics.overall} */\n    it('Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric', async () => {\n      const { nockDone } = await nockBack('Metrics/overall.json');\n      const resp = await Data.Metrics.overall('video_startup_time');\n      expect(resp.data).to.be.an('object');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Metrics.timeseries} */\n  describe('Metrics.timeseries', () => {\n    /** @test {Metrics.timeseries} */\n    it('Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric', async () => {\n      const { nockDone } = await nockBack('Metrics/timeseries.json');\n      const resp = await Data.Metrics.timeseries('video_startup_time');\n      expect(resp.data).to.be.an('array');\n      expect(resp.timeframe).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/metrics.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/integration/data/metrics.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14",
    "access": null,
    "description": "Integration::Metrics",
    "lineNumber": 7,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 68,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/integration/data/metrics.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe15",
    "access": null,
    "description": "Metrics.breakdown",
    "lineNumber": 12,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 69,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/integration/data/metrics.spec.js~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe15.it16",
    "access": null,
    "description": "Lists all of the values across every breakdown for a specific metric",
    "lineNumber": 14,
    "testTargets": [
      "Metrics.breakdown"
    ]
  },
  {
    "__docId__": 70,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/integration/data/metrics.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe17",
    "access": null,
    "description": "Metrics.comparision",
    "lineNumber": 26,
    "testTargets": [
      "Metrics.comparision"
    ]
  },
  {
    "__docId__": 71,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/integration/data/metrics.spec.js~describe14.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe17.it18",
    "access": null,
    "description": "Lists the breakdown values for a specific metric",
    "lineNumber": 28,
    "testTargets": [
      "Metrics.comparision"
    ]
  },
  {
    "__docId__": 72,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/integration/data/metrics.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe19",
    "access": null,
    "description": "Metrics.insights",
    "lineNumber": 41,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 73,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/integration/data/metrics.spec.js~describe14.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe19.it20",
    "access": null,
    "description": "Returns a list of insights for a metric",
    "lineNumber": 43,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 74,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/integration/data/metrics.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe21",
    "access": null,
    "description": "Metrics.overall",
    "lineNumber": 53,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 75,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/integration/data/metrics.spec.js~describe14.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe21.it22",
    "access": null,
    "description": "Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric",
    "lineNumber": 55,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 76,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/integration/data/metrics.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe23",
    "access": null,
    "description": "Metrics.timeseries",
    "lineNumber": 65,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 77,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/integration/data/metrics.spec.js~describe14.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/metrics.spec.js~describe14.describe23.it24",
    "access": null,
    "description": "Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric",
    "lineNumber": 67,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 78,
    "kind": "testFile",
    "name": "test/integration/data/real_time.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {RealTime} */\ndescribe('Integration::RealTime', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {RealTime.dimensions} */\n  describe('RealTime.dimensions', () => {\n    /** @test {RealTime.dimensions} */\n    it('List of available real-time dimensions', async () => {\n      const { nockDone } = await nockBack('RealTime/dimensions.json');\n      const resp = await Data.RealTime.dimensions();\n      expect(resp.data).to.be.an('array');\n      expect(resp.data[0]).to.be.an('object');\n      nockDone();\n    });\n  });\n\n  /** @test {RealTime.metrics} */\n  describe('RealTime.metrics', () => {\n    /** @test {RealTime.metrics} */\n    it('List available real-time metrics', async () => {\n      const { nockDone } = await nockBack('RealTime/metrics.json');\n      const resp = await Data.RealTime.metrics();\n      expect(resp.data).to.be.an('array');\n      expect(resp.data[0]).to.be.an('object');\n      nockDone();\n    });\n  });\n\n  /** @test {RealTime.breakdown} */\n  describe('RealTime.breakdown', () => {\n    /** @test {RealTime.breakdown} */\n    it('Get breakdown information for a specific dimension and metric', async () => {\n      const { nockDone } = await nockBack('RealTime/breakdown.json');\n      const timestamp = 1592357452; // freeze this time for nock\n      const resp = await Data.RealTime.breakdown(\n        'playback-failure-percentage',\n        {\n          dimension: 'asn',\n          timestamp,\n          filters: ['operating_system:windows', 'country:US'],\n        }\n      );\n      expect(resp.data).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {RealTime.histogramTimeseries} */\n  describe('RealTime.histogramTimeseries', () => {\n    /** @test {RealTime.histogramTimeseries} */\n    it('List histogram timeseries information for a specific metric', async () => {\n      const { nockDone } = await nockBack('RealTime/histogramTimeseries.json');\n      const resp = await Data.RealTime.histogramTimeseries(\n        'video-startup-time',\n        { filters: ['operating_system:windows', 'country:US'] }\n      );\n      expect(resp.data).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {RealTime.timeseries} */\n  describe('RealTime.timeseries', () => {\n    /** @test {RealTime.timeseries} */\n    it('List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US', async () => {\n      const { nockDone } = await nockBack('RealTime/timeseries.json');\n      const resp = await Data.RealTime.timeseries(\n        'playback-failure-percentage',\n        { filters: ['operating_system:windows', 'country:US'] }\n      );\n      expect(resp.data).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/real_time.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/integration/data/real_time.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25",
    "access": null,
    "description": "Integration::RealTime",
    "lineNumber": 7,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 80,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/integration/data/real_time.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe26",
    "access": null,
    "description": "RealTime.dimensions",
    "lineNumber": 12,
    "testTargets": [
      "RealTime.dimensions"
    ]
  },
  {
    "__docId__": 81,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/integration/data/real_time.spec.js~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe26.it27",
    "access": null,
    "description": "List of available real-time dimensions",
    "lineNumber": 14,
    "testTargets": [
      "RealTime.dimensions"
    ]
  },
  {
    "__docId__": 82,
    "kind": "test",
    "name": "describe28",
    "testId": 28,
    "memberof": "test/integration/data/real_time.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe28",
    "access": null,
    "description": "RealTime.metrics",
    "lineNumber": 24,
    "testTargets": [
      "RealTime.metrics"
    ]
  },
  {
    "__docId__": 83,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/integration/data/real_time.spec.js~describe25.describe28",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe28.it29",
    "access": null,
    "description": "List available real-time metrics",
    "lineNumber": 26,
    "testTargets": [
      "RealTime.metrics"
    ]
  },
  {
    "__docId__": 84,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/integration/data/real_time.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe30",
    "access": null,
    "description": "RealTime.breakdown",
    "lineNumber": 36,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 85,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/integration/data/real_time.spec.js~describe25.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe30.it31",
    "access": null,
    "description": "Get breakdown information for a specific dimension and metric",
    "lineNumber": 38,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 86,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/integration/data/real_time.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe32",
    "access": null,
    "description": "RealTime.histogramTimeseries",
    "lineNumber": 55,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 87,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/integration/data/real_time.spec.js~describe25.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe32.it33",
    "access": null,
    "description": "List histogram timeseries information for a specific metric",
    "lineNumber": 57,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 88,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/integration/data/real_time.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe34",
    "access": null,
    "description": "RealTime.timeseries",
    "lineNumber": 69,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 89,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/integration/data/real_time.spec.js~describe25.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/real_time.spec.js~describe25.describe34.it35",
    "access": null,
    "description": "List timeseries information for the playback-failure-percentage metric along with the number of concurrent viewers for the Windows operating system in the US",
    "lineNumber": 71,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 90,
    "kind": "testFile",
    "name": "test/integration/data/video_views.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {VideoViews} */\ndescribe('Integration::VideoViews', () => {\n  const muxClient = new Mux();\n  const { Data } = muxClient;\n\n  /** @test {VideoViews.list} */\n  describe('VideoViews.list', () => {\n    /** @test {VideoViews.list} */\n    it('Returns a list of video views for a property that occurred within the specified timeframe', async () => {\n      const { nockDone } = await nockBack('VideoViews/list.json');\n      const resp = await Data.VideoViews.list({\n        viewer_id: 'test',\n        order_direction: 'asc',\n      });\n      expect(resp.data).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {VideoViews.get} */\n  describe('VideoViews.get', () => {\n    /** @test {VideoViews.get} */\n    it('Returns the details for a single video view', async () => {\n      const { nockDone } = await nockBack('VideoViews/listAndGet.json');\n      const resp = await Data.VideoViews.list();\n      const view = await Data.VideoViews.get(resp.data[0].id);\n      expect(view).to.be.an('object');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/data/video_views.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/integration/data/video_views.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/data/video_views.spec.js~describe36",
    "access": null,
    "description": "Integration::VideoViews",
    "lineNumber": 7,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 92,
    "kind": "test",
    "name": "describe37",
    "testId": 37,
    "memberof": "test/integration/data/video_views.spec.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/video_views.spec.js~describe36.describe37",
    "access": null,
    "description": "VideoViews.list",
    "lineNumber": 12,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 93,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/integration/data/video_views.spec.js~describe36.describe37",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/video_views.spec.js~describe36.describe37.it38",
    "access": null,
    "description": "Returns a list of video views for a property that occurred within the specified timeframe",
    "lineNumber": 14,
    "testTargets": [
      "VideoViews.list"
    ]
  },
  {
    "__docId__": 94,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/integration/data/video_views.spec.js~describe36",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/data/video_views.spec.js~describe36.describe39",
    "access": null,
    "description": "VideoViews.get",
    "lineNumber": 26,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 95,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/integration/data/video_views.spec.js~describe36.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/data/video_views.spec.js~describe36.describe39.it40",
    "access": null,
    "description": "Returns the details for a single video view",
    "lineNumber": 28,
    "testTargets": [
      "VideoViews.get"
    ]
  },
  {
    "__docId__": 96,
    "kind": "testFile",
    "name": "test/integration/video/assets.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\nconst TEST_VIDEO =\n  'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4';\n\n/** @test {Assets} */\ndescribe('Integration::Assets', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {Assets.create} */\n  describe('Assets.create', () => {\n    /** @test {Assets.create} */\n    it('creates an asset when given an input', async () => {\n      const { nockDone } = await nockBack('Assets/create.json');\n      const asset = await Video.Assets.create({ input: TEST_VIDEO });\n      expect(asset.status).to.equal('preparing');\n      expect(asset.id).to.exist;\n      await Video.Assets.del(asset.id);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.del} */\n  describe('Assets.del', () => {\n    /** @test {Assets.del} */\n    it('deletes an asset', async () => {\n      const { nockDone } = await nockBack('Assets/createAndDelete.json');\n      const asset = await Video.Assets.create({ input: TEST_VIDEO });\n      await Video.Assets.del(asset.id);\n      nockDone();\n    });\n\n    /** @test {Assets.del} */\n    it('fails to delete an asset when not given an incorrect assetId', async () => {\n      const { nockDone } = await nockBack('Assets/deleteFail.json');\n      await Video.Assets.del('somefakeid').catch((err) => expect(err).to.exist);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.get} */\n  describe('Assets.get', () => {\n    /** @test {Assets.get} */\n    it('gets an asset', async () => {\n      const { nockDone } = await nockBack('Assets/get.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      const asset = await Video.Assets.get(testAsset.id);\n      expect(asset.id).to.equal(testAsset.id);\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n\n    /** @test {Assets.get} */\n    it('fails to get an asset when not given an incorrect assetId', async () => {\n      const { nockDone } = await nockBack('Assets/getFail.json');\n      await Video.Assets.get('somefakeid').catch((err) => expect(err).to.exist);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.inputInfo} */\n  describe('Assets.inputInfo', () => {\n    /** @test {Assets.inputInfo} */\n    // Don't use mochaAsync here because we want to handle the catch ourselves\n    it('gets input-info for an asset', async () => {\n      const { nockDone } = await nockBack('Assets/inputInfo.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      try {\n        const info = await Video.Assets.inputInfo(testAsset.id);\n        expect(info).to.be.an('array');\n      } catch (err) {\n        expect(err.messages).to.eql(['Asset is still preparing']);\n      }\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n\n    /** @test {Assets.inputInfo} */\n    it('fails to get an asset when not given an incorrect assetId', async () => {\n      const { nockDone } = await nockBack('Assets/inputInfoFail.json');\n      await Video.Assets.inputInfo('somefakeid').catch(\n        (err) => expect(err).to.exist\n      );\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.list} */\n  describe('Assets.list', () => {\n    /** @test {Assets.list} */\n    it('lists all assets for an environment', async () => {\n      const { nockDone } = await nockBack('Assets/list.json');\n      const assets = await Video.Assets.list();\n      expect(assets).to.be.an('array');\n      nockDone();\n    });\n\n    it('lists 5 assets for an environment', async () => {\n      const { nockDone } = await nockBack('Assets/listLimit.json');\n      const assets = await Video.Assets.list({ limit: 5 });\n      expect(assets).to.be.an('array');\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.createPlaybackId} */\n  describe('Assets.createPlaybackId', () => {\n    /** @test {PlaybackIds.create} */\n    it('creates playbackIds for an asset', async () => {\n      const { nockDone } = await nockBack('Assets/createPlaybackId.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      const playbackId = await Video.Assets.createPlaybackId(testAsset.id, {\n        policy: 'public',\n      });\n      expect(playbackId.policy).to.equal('public');\n      expect(playbackId.id).to.exist;\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n\n    /** @test {PlaybackIds.create} */\n    it('throws an error if an Asset ID is not given', async () => {\n      const { nockDone } = await nockBack('Assets/createPlaybackIdFail1.json');\n      await Video.Assets.createPlaybackId().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n        nockDone();\n      });\n    });\n\n    /** @test {PlaybackIds.create} */\n    it('throws an error if params are not given', async () => {\n      const { nockDone } = await nockBack('Assets/createPlaybackIdFail2.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      await Video.Assets.createPlaybackId(testAsset.id).catch(async (err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('Playback ID params are required');\n        await Video.Assets.del(testAsset.id);\n        nockDone();\n      });\n    });\n  });\n\n  /** @test {Assets.playbackId} */\n  describe('Assets.playbackId', () => {\n    /** @test {PlaybackIds.get} */\n    it('gets playbackIds for an asset', async () => {\n      const { nockDone } = await nockBack('Assets/getPlaybackId.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      const { id } = await Video.Assets.createPlaybackId(testAsset.id, {\n        policy: 'public',\n      });\n      const playbackId = await Video.Assets.playbackId(testAsset.id, id);\n      expect(playbackId.id).to.equal(id);\n      expect(playbackId.policy).to.equal('public');\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.deletePlaybackId} */\n  describe('Assets.deletePlaybackId', () => {\n    /** @test {Assets.deletePlaybackId} */\n    it('deletes playbackIds for an asset', async () => {\n      // Assets do not get 'playback_ids' until they are 'ready'\n      // In order to write this integration test we would have to\n      // wait for the asset to be 'ready'\n    });\n\n    /** @test {Assets.deletePlaybackId} */\n    it('fails to delete playbackIds for an asset when not given a playback ID', async () => {\n      const { nockDone } = await nockBack('Assets/deletePlaybackIdFail.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      await Video.Assets.deletePlaybackId(testAsset.id).catch(\n        (err) => expect(err).to.exist\n      );\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.updateMp4Support} */\n  describe('Assets.updateMp4Support', () => {\n    /** @test {Assets.updateMp4Support} */\n    it('updates the mp4 support for an asset', async () => {\n      const { nockDone } = await nockBack('Assets/updateMp4Support.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      try {\n        await Video.Assets.updateMp4Support(testAsset.id, {\n          mp4_support: 'standard',\n        });\n        const { mp4_support: updatedMp4Support } = await Video.Assets.get(\n          testAsset.id\n        );\n        expect(updatedMp4Support).to.equal('standard');\n      } catch (err) {\n        expect(err.messages && err.messages[0]).to.equal('Asset is not ready');\n      }\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n  });\n\n  /** @test {Assets.updateMasterAccess} */\n  describe('Assets.updateMasterAccess', () => {\n    /** @test {Assets.updateMasterAccess} */\n    it('updates the master access for an asset', async () => {\n      const { nockDone } = await nockBack('Assets/updateMasterAccess.json');\n      const testAsset = await Video.Assets.create({ input: TEST_VIDEO });\n      try {\n        await Video.Assets.updateMasterAccess(testAsset.id, {\n          master_access: 'temporary',\n        });\n        const { master_access: updatedMasterAccess } = await Video.Assets.get(\n          testAsset.id\n        );\n        expect(updatedMasterAccess).to.equal('temporary');\n      } catch (err) {\n        expect(err.messages && err.messages[0]).to.equal('Asset is not ready');\n      }\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/assets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/integration/video/assets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41",
    "access": null,
    "description": "Integration::Assets",
    "lineNumber": 10,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 98,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe42",
    "access": null,
    "description": "Assets.create",
    "lineNumber": 15,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 99,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe42.it43",
    "access": null,
    "description": "creates an asset when given an input",
    "lineNumber": 17,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 100,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe44",
    "access": null,
    "description": "Assets.del",
    "lineNumber": 28,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 101,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe44.it45",
    "access": null,
    "description": "deletes an asset",
    "lineNumber": 30,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 102,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe44.it46",
    "access": null,
    "description": "fails to delete an asset when not given an incorrect assetId",
    "lineNumber": 38,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 103,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe47",
    "access": null,
    "description": "Assets.get",
    "lineNumber": 46,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 104,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe47.it48",
    "access": null,
    "description": "gets an asset",
    "lineNumber": 48,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 105,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe47.it49",
    "access": null,
    "description": "fails to get an asset when not given an incorrect assetId",
    "lineNumber": 58,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 106,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe50",
    "access": null,
    "description": "Assets.inputInfo",
    "lineNumber": 66,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 107,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe50.it51",
    "access": null,
    "description": "gets input-info for an asset",
    "lineNumber": 69
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe50.it52",
    "access": null,
    "description": "fails to get an asset when not given an incorrect assetId",
    "lineNumber": 83,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe53",
    "access": null,
    "description": "Assets.list",
    "lineNumber": 93,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe53.it54",
    "access": null,
    "description": "lists all assets for an environment",
    "lineNumber": 95,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe53.it55",
    "access": null,
    "description": "lists 5 assets for an environment",
    "lineNumber": 102
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe56",
    "access": null,
    "description": "Assets.createPlaybackId",
    "lineNumber": 111,
    "testTargets": [
      "Assets.createPlaybackId"
    ]
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe56.it57",
    "access": null,
    "description": "creates playbackIds for an asset",
    "lineNumber": 113,
    "testTargets": [
      "PlaybackIds.create"
    ]
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe56.it58",
    "access": null,
    "description": "throws an error if an Asset ID is not given",
    "lineNumber": 126,
    "testTargets": [
      "PlaybackIds.create"
    ]
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe56.it59",
    "access": null,
    "description": "throws an error if params are not given",
    "lineNumber": 136,
    "testTargets": [
      "PlaybackIds.create"
    ]
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe60",
    "access": null,
    "description": "Assets.playbackId",
    "lineNumber": 149,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe60.it61",
    "access": null,
    "description": "gets playbackIds for an asset",
    "lineNumber": 151,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe62",
    "access": null,
    "description": "Assets.deletePlaybackId",
    "lineNumber": 166,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe62.it63",
    "access": null,
    "description": "deletes playbackIds for an asset",
    "lineNumber": 168,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe62.it64",
    "access": null,
    "description": "fails to delete playbackIds for an asset when not given a playback ID",
    "lineNumber": 175,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe65",
    "access": null,
    "description": "Assets.updateMp4Support",
    "lineNumber": 187,
    "testTargets": [
      "Assets.updateMp4Support"
    ]
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe65.it66",
    "access": null,
    "description": "updates the mp4 support for an asset",
    "lineNumber": 189,
    "testTargets": [
      "Assets.updateMp4Support"
    ]
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/integration/video/assets.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe67",
    "access": null,
    "description": "Assets.updateMasterAccess",
    "lineNumber": 209,
    "testTargets": [
      "Assets.updateMasterAccess"
    ]
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/integration/video/assets.spec.js~describe41.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/assets.spec.js~describe41.describe67.it68",
    "access": null,
    "description": "updates the master access for an asset",
    "lineNumber": 211,
    "testTargets": [
      "Assets.updateMasterAccess"
    ]
  },
  {
    "__docId__": 125,
    "kind": "testFile",
    "name": "test/integration/video/deliveryUsage.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {DeliveryUsage} */\ndescribe('Integration::DeliveryUsage', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {DeliveryUsage.list} */\n  describe('DeliveryUsage.list', () => {\n    /** @test {DeliveryUsage.list} */\n    it('lists all delivery usage for a timeframe', async () => {\n      const { nockDone } = await nockBack('DeliveryUsage/list.json');\n      const usage = await Video.DeliveryUsage.list({\n        timeframe: [],\n        page: 2,\n        limit: 100,\n      });\n      expect(usage).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/deliveryUsage.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/integration/video/deliveryUsage.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/deliveryUsage.spec.js~describe69",
    "access": null,
    "description": "Integration::DeliveryUsage",
    "lineNumber": 7,
    "testTargets": [
      "DeliveryUsage"
    ]
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/integration/video/deliveryUsage.spec.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/deliveryUsage.spec.js~describe69.describe70",
    "access": null,
    "description": "DeliveryUsage.list",
    "lineNumber": 12,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/integration/video/deliveryUsage.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/deliveryUsage.spec.js~describe69.describe70.it71",
    "access": null,
    "description": "lists all delivery usage for a timeframe",
    "lineNumber": 14,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 129,
    "kind": "testFile",
    "name": "test/integration/video/liveStreams.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {LiveStreams} */\ndescribe('Integration::LiveStreams', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {LiveStreams.create} */\n  describe('LiveStreams.create', () => {\n    /** @test {LiveStreams.create} */\n    it('creates a live stream with defaults', async () => {\n      const { nockDone } = await nockBack('LiveStreams/create.json');\n      const stream = await Video.LiveStreams.create();\n      expect(stream.stream_key).to.exist;\n      expect(stream.status).to.equal('idle');\n      expect(stream.reconnect_window).to.equal(60);\n      await Video.LiveStreams.del(stream.id);\n      nockDone();\n    });\n\n    it('creates a live stream with given parameters', async () => {\n      const { nockDone } = await nockBack('LiveStreams/createWithParams.json');\n      const stream = await Video.LiveStreams.create({\n        playback_policy: 'signed',\n        new_asset_settings: {\n          playback_policy: 'signed',\n        },\n      });\n\n      expect(stream.playback_ids[0].policy).to.equal('signed');\n      expect(stream.new_asset_settings).to.eql({\n        playback_policies: ['signed'],\n      });\n      await Video.LiveStreams.del(stream.id);\n      nockDone();\n    });\n\n    it('creates a low_latency live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/createLowLatency.json');\n      const stream = await Video.LiveStreams.create({\n        low_latency: true,\n      });\n\n      expect(stream.low_latency).to.be.true;\n      await Video.LiveStreams.del(stream.id);\n      nockDone();\n    });\n  });\n\n  /** @test {LiveStreams.del} */\n  describe('LiveStreams.del', () => {\n    /** @test {LiveStreams.del} */\n    it('deletes a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/del.json');\n      const stream = await Video.LiveStreams.create();\n      await Video.LiveStreams.del(stream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.del} */\n    it('fails to delete a live stream when not given an incorrect live stream id', () =>\n      Video.LiveStreams.del('somefakeid').catch((err) => expect(err).to.exist));\n  });\n\n  /** @test {LiveStreams.get} */\n  describe('LiveStreams.get', () => {\n    /** @test {LiveStreams.get} */\n    it('gets a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/get.json');\n      const testLiveStream = await Video.LiveStreams.create();\n      const stream = await Video.LiveStreams.get(testLiveStream.id);\n      expect(stream.status).to.equal('idle');\n      nockDone();\n    });\n\n    /** @test {LiveStreams.get} */\n    it('fails to get a live stream when not given an incorrect live stream id', () =>\n      Video.LiveStreams.get('somefakeid').catch((err) => expect(err).to.exist));\n  });\n\n  /** @test {LiveStreams.signalComplete} */\n  describe('LiveStreams.signalComplete', () => {\n    /** @test {LiveStreams.signalComplete} */\n    it('signals a live stream is complete', async () => {\n      const { nockDone } = await nockBack('LiveStreams/signalComplete.json');\n      const testLiveStream = await Video.LiveStreams.create();\n      // Just returns a 204\n      await Video.LiveStreams.signalComplete(testLiveStream.id);\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.signalComplete} */\n    it('fails to signal a live stream is complete when given an incorrect live stream id', async () => {\n      const { nockDone } = await nockBack(\n        'LiveStreams/signalCompleteFail.json'\n      );\n      await Video.LiveStreams.signalComplete('somefakeid').catch(\n        (err) => expect(err).to.exist\n      );\n      nockDone();\n    });\n  });\n\n  /** @test {LiveStreams.list} */\n  describe('LiveStreams.list', () => {\n    /** @test {LiveStreams.list} */\n    it('lists all live streams for an environment', async () => {\n      const { nockDone } = await nockBack('LiveStreams/list.json');\n      const streams = await Video.LiveStreams.list();\n      expect(streams).to.be.an('array');\n      nockDone();\n    });\n\n    it('lists 5 live streams for an environment', async () => {\n      const { nockDone } = await nockBack('LiveStreams/listWithLimit.json');\n      const streams = await Video.LiveStreams.list({ limit: 5 });\n      expect(streams.length).to.be.at.most(5);\n      nockDone();\n    });\n  });\n\n  /** @test {LiveStreams.resetStreamKey} */\n  describe('LiveStreams.resetStreamKey', () => {\n    /** @test {LiveStreams.resetStreamKey} */\n    it('resets a stream key', async () => {\n      const { nockDone } = await nockBack('LiveStreams/resetStreamKey.json');\n      const testLiveStream = await Video.LiveStreams.create();\n      const stream = await Video.LiveStreams.resetStreamKey(testLiveStream.id);\n      expect(stream.id).to.equal(testLiveStream.id);\n      expect(stream.stream_key).to.not.equal(testLiveStream.stream_key);\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.resetStreamKey} */\n    it('fails to reset a stream key if given an incorrect live stream id', () =>\n      Video.LiveStreams.resetStreamKey('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.createPlaybackId} */\n  describe('LiveStreams.createPlaybackId', () => {\n    /** @test {LiveStreams.createPlaybackId} */\n    it('creates a playback id for a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/createPlaybackId.json');\n      const testLiveStream = await Video.LiveStreams.create();\n      const playbackId = await Video.LiveStreams.createPlaybackId(\n        testLiveStream.id,\n        { policy: 'public' }\n      );\n      expect(playbackId.policy).to.equal('public');\n      await Video.LiveStreams.del(testLiveStream.id);\n      expect(playbackId.id).to.exist;\n      nockDone();\n    });\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('fails to create a playback id if given an incorrect live stream id', async () => {\n      const { nockDone } = await nockBack(\n        'LiveStreams/createPlaybackIdFail.json'\n      );\n      await Video.LiveStreams.createPlaybackId('somefakeid', {\n        policy: 'public',\n      }).catch((err) => expect(err).to.exist);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.createPlaybackId} */\n    it('fails to create a playback id if not given a playback policy', () =>\n      Video.LiveStreams.createPlaybackId('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.deletePlaybackId} */\n  describe('LiveStreams.deletePlaybackId', () => {\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('deletes playbackIds for a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/deletePlaybackId.json');\n      const testLiveStream = await Video.LiveStreams.create({\n        playback_policy: 'public',\n      });\n      const playbackId = await Video.LiveStreams.createPlaybackId(\n        testLiveStream.id,\n        { policy: 'public' }\n      );\n      await Video.LiveStreams.deletePlaybackId(\n        testLiveStream.id,\n        playbackId.id\n      );\n      const { playback_ids: updatedPlaybackIds } = await Video.LiveStreams.get(\n        testLiveStream.id\n      );\n      expect(updatedPlaybackIds).to.not.include(playbackId);\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {PlaybackIds.deletePlaybackId} */\n    it('fails to get playbackIds for a live stream when not given a playback ID', () =>\n      Video.LiveStreams.deletePlaybackId('playbackId1').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.createSimulcastTarget} */\n  describe('LiveStreams.createSimulcastTarget', () => {\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('creates a simulcast target for a live stream', async () => {\n      const { nockDone } = await nockBack(\n        'LiveStreams/createSimulcastTarget.json'\n      );\n      const testLiveStream = await Video.LiveStreams.create();\n      const simulcastTarget = await Video.LiveStreams.createSimulcastTarget(\n        testLiveStream.id,\n        { url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi' }\n      );\n      expect(simulcastTarget.id).to.exist;\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('fails to create a simulcast target if given an incorrect live stream id', () =>\n      Video.LiveStreams.createSimulcastTarget('somefakeid', {\n        url: 'rtmp://live.example.com/app',\n        stream_key: 'difvbfgi',\n      }).catch((err) => expect(err).to.exist));\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('fails to create a playback id if not given params', () =>\n      Video.LiveStreams.createSimulcastTarget('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.getSimulcastTarget} */\n  describe('LiveStreams.getSimulcastTarget', () => {\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('gets a simulcast target for a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/getSimulcastTarget');\n      const testLiveStream = await Video.LiveStreams.create();\n      const testSimulcastTarget = await Video.LiveStreams.createSimulcastTarget(\n        testLiveStream.id,\n        { url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi' }\n      );\n      const simulcastTarget = await Video.LiveStreams.getSimulcastTarget(\n        testLiveStream.id,\n        testSimulcastTarget.id\n      );\n      expect(simulcastTarget.id).to.exist;\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('fails to get a simulcast target if given an incorrect live stream id', () =>\n      Video.LiveStreams.getSimulcastTarget('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('fails to get a simulcast target given a fake simulcast target idj', () =>\n      Video.LiveStreams.createSimulcastTarget(\n        'somefakeid',\n        'someotherfakeid'\n      ).catch((err) => expect(err).to.exist));\n  });\n\n  /** @test {LiveStreams.deleteSimulcastTarget} */\n  describe('LiveStreams.deleteSimulcastTarget', () => {\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('deletes the simulcast target for a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/deleteSimulcastTarget');\n      const testLiveStream = await Video.LiveStreams.create({\n        simulcast_targets: [\n          { url: 'rtmp://live.example.com/app', stream_key: '12345' },\n        ],\n      });\n      const simulcastTarget = await Video.LiveStreams.createSimulcastTarget(\n        testLiveStream.id,\n        { url: 'rtmp://live.example.com/app', stream_key: 'difvbfgi' }\n      );\n      await Video.LiveStreams.deleteSimulcastTarget(\n        testLiveStream.id,\n        simulcastTarget.id\n      );\n      await Video.LiveStreams.get(testLiveStream.id);\n      const { simulcast_targets: updatedSimulcastTargets } =\n        await Video.LiveStreams.get(testLiveStream.id);\n      const simulcastTargetIds = updatedSimulcastTargets.map(\n        (target) => target.id\n      );\n      expect(simulcastTargetIds).to.not.include(simulcastTarget.id);\n      await Video.LiveStreams.del(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {PlaybackIds.deletePlaybackId} */\n    it('fails to get playbackIds for a live stream when not given a playback ID', () =>\n      Video.LiveStreams.deletePlaybackId('testLiveStreamId').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.enable} */\n  describe('LiveStreams.enable', () => {\n    /** @test {LiveStreams.enable} */\n    it('enables a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/enable.json');\n      const testLiveStream = await Video.LiveStreams.create();\n\n      await Video.LiveStreams.enable(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.enable} */\n    it('fails to enable a live stream if given an incorrect live stream id', () =>\n      Video.LiveStreams.enable('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n\n  /** @test {LiveStreams.disable} */\n  describe('LiveStreams.disable', () => {\n    /** @test {LiveStreams.disable} */\n    it('disables a live stream', async () => {\n      const { nockDone } = await nockBack('LiveStreams/disable.json');\n      const testLiveStream = await Video.LiveStreams.create();\n\n      await Video.LiveStreams.disable(testLiveStream.id);\n      nockDone();\n    });\n\n    /** @test {LiveStreams.disable} */\n    it('fails to disable a live stream if given an incorrect live stream id', () =>\n      Video.LiveStreams.disable('somefakeid').catch(\n        (err) => expect(err).to.exist\n      ));\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/liveStreams.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/integration/video/liveStreams.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72",
    "access": null,
    "description": "Integration::LiveStreams",
    "lineNumber": 7,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe73",
    "access": null,
    "description": "LiveStreams.create",
    "lineNumber": 12,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe73.it74",
    "access": null,
    "description": "creates a live stream with defaults",
    "lineNumber": 14,
    "testTargets": [
      "LiveStreams.create"
    ]
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe73.it75",
    "access": null,
    "description": "creates a live stream with given parameters",
    "lineNumber": 24
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe73.it76",
    "access": null,
    "description": "creates a low_latency live stream",
    "lineNumber": 41
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe77",
    "access": null,
    "description": "LiveStreams.del",
    "lineNumber": 54,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe77.it78",
    "access": null,
    "description": "deletes a live stream",
    "lineNumber": 56,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe77.it79",
    "access": null,
    "description": "fails to delete a live stream when not given an incorrect live stream id",
    "lineNumber": 64,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe80",
    "access": null,
    "description": "LiveStreams.get",
    "lineNumber": 69,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe80.it81",
    "access": null,
    "description": "gets a live stream",
    "lineNumber": 71,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe80.it82",
    "access": null,
    "description": "fails to get a live stream when not given an incorrect live stream id",
    "lineNumber": 80,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe83",
    "access": null,
    "description": "LiveStreams.signalComplete",
    "lineNumber": 85,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe83.it84",
    "access": null,
    "description": "signals a live stream is complete",
    "lineNumber": 87,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe83.it85",
    "access": null,
    "description": "fails to signal a live stream is complete when given an incorrect live stream id",
    "lineNumber": 97,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe86",
    "access": null,
    "description": "LiveStreams.list",
    "lineNumber": 109,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe86.it87",
    "access": null,
    "description": "lists all live streams for an environment",
    "lineNumber": 111,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe86.it88",
    "access": null,
    "description": "lists 5 live streams for an environment",
    "lineNumber": 118
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe89",
    "access": null,
    "description": "LiveStreams.resetStreamKey",
    "lineNumber": 127,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe89.it90",
    "access": null,
    "description": "resets a stream key",
    "lineNumber": 129,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe89.it91",
    "access": null,
    "description": "fails to reset a stream key if given an incorrect live stream id",
    "lineNumber": 140,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe92",
    "access": null,
    "description": "LiveStreams.createPlaybackId",
    "lineNumber": 147,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe92.it93",
    "access": null,
    "description": "creates a playback id for a live stream",
    "lineNumber": 149,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe92.it94",
    "access": null,
    "description": "fails to create a playback id if given an incorrect live stream id",
    "lineNumber": 163,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe92.it95",
    "access": null,
    "description": "fails to create a playback id if not given a playback policy",
    "lineNumber": 174,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe96",
    "access": null,
    "description": "LiveStreams.deletePlaybackId",
    "lineNumber": 181,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe96.it97",
    "access": null,
    "description": "deletes playbackIds for a live stream",
    "lineNumber": 183,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe96",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe96.it98",
    "access": null,
    "description": "fails to get playbackIds for a live stream when not given a playback ID",
    "lineNumber": 205,
    "testTargets": [
      "PlaybackIds.deletePlaybackId"
    ]
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe99",
    "access": null,
    "description": "LiveStreams.createSimulcastTarget",
    "lineNumber": 212,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe99.it100",
    "access": null,
    "description": "creates a simulcast target for a live stream",
    "lineNumber": 214,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe99.it101",
    "access": null,
    "description": "fails to create a simulcast target if given an incorrect live stream id",
    "lineNumber": 229,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe99.it102",
    "access": null,
    "description": "fails to create a playback id if not given params",
    "lineNumber": 236,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe103",
    "access": null,
    "description": "LiveStreams.getSimulcastTarget",
    "lineNumber": 243,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe103.it104",
    "access": null,
    "description": "gets a simulcast target for a live stream",
    "lineNumber": 245,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe103.it105",
    "access": null,
    "description": "fails to get a simulcast target if given an incorrect live stream id",
    "lineNumber": 262,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe103.it106",
    "access": null,
    "description": "fails to get a simulcast target given a fake simulcast target idj",
    "lineNumber": 268,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe107",
    "access": null,
    "description": "LiveStreams.deleteSimulcastTarget",
    "lineNumber": 276,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe107.it108",
    "access": null,
    "description": "deletes the simulcast target for a live stream",
    "lineNumber": 278,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe107.it109",
    "access": null,
    "description": "fails to get playbackIds for a live stream when not given a playback ID",
    "lineNumber": 305,
    "testTargets": [
      "PlaybackIds.deletePlaybackId"
    ]
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe110",
    "access": null,
    "description": "LiveStreams.enable",
    "lineNumber": 312,
    "testTargets": [
      "LiveStreams.enable"
    ]
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe110.it111",
    "access": null,
    "description": "enables a live stream",
    "lineNumber": 314,
    "testTargets": [
      "LiveStreams.enable"
    ]
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe110",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe110.it112",
    "access": null,
    "description": "fails to enable a live stream if given an incorrect live stream id",
    "lineNumber": 323,
    "testTargets": [
      "LiveStreams.enable"
    ]
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe113",
    "access": null,
    "description": "LiveStreams.disable",
    "lineNumber": 330,
    "testTargets": [
      "LiveStreams.disable"
    ]
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe113.it114",
    "access": null,
    "description": "disables a live stream",
    "lineNumber": 332,
    "testTargets": [
      "LiveStreams.disable"
    ]
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/integration/video/liveStreams.spec.js~describe72.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/liveStreams.spec.js~describe72.describe113.it115",
    "access": null,
    "description": "fails to disable a live stream if given an incorrect live stream id",
    "lineNumber": 341,
    "testTargets": [
      "LiveStreams.disable"
    ]
  },
  {
    "__docId__": 174,
    "kind": "testFile",
    "name": "test/integration/video/playbackIds.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\nconst TEST_VIDEO =\n  'https://storage.googleapis.com/muxdemofiles/mux-video-intro.mp4';\n\n/** @test {PlaybackIds} */\ndescribe('Integration::PlaybackIds', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {PlaybackIds.get} */\n  describe('PlaybackIds.get', () => {\n    /** @test {PlaybackIds.get} */\n    it('gets an asset or live stream from a playback id', async () => {\n      const { nockDone } = await nockBack('PlaybackIds/get.json');\n      const testAsset = await Video.Assets.create({\n        input: TEST_VIDEO,\n        playback_policy: 'public',\n      });\n      const asset = await Video.PlaybackIds.get(testAsset.playback_ids[0].id);\n      expect(asset.id).to.equal(testAsset.playback_ids[0].id);\n      await Video.Assets.del(testAsset.id);\n      nockDone();\n    });\n\n    /** @test {PlaybackIds.get} */\n    it('fails to get a live stream or asset when not given an incorrect playback id', () =>\n      Video.PlaybackIds.get('somefakeid').catch((err) => expect(err).to.exist));\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/playbackIds.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/integration/video/playbackIds.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/playbackIds.spec.js~describe116",
    "access": null,
    "description": "Integration::PlaybackIds",
    "lineNumber": 10,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "test/integration/video/playbackIds.spec.js~describe116",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/playbackIds.spec.js~describe116.describe117",
    "access": null,
    "description": "PlaybackIds.get",
    "lineNumber": 15,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/integration/video/playbackIds.spec.js~describe116.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/playbackIds.spec.js~describe116.describe117.it118",
    "access": null,
    "description": "gets an asset or live stream from a playback id",
    "lineNumber": 17,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/integration/video/playbackIds.spec.js~describe116.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/playbackIds.spec.js~describe116.describe117.it119",
    "access": null,
    "description": "fails to get a live stream or asset when not given an incorrect playback id",
    "lineNumber": 30,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 179,
    "kind": "testFile",
    "name": "test/integration/video/signingKeys.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {SigningKeys} */\ndescribe('Integration:SigningKeys', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {SigningKeys.create} */\n  describe('SigningKeys.create', () => {\n    /** @test {SigningKeys.create} */\n    it('creates a new signing key', async () => {\n      const { nockDone } = await nockBack('SigningKeys/create.json');\n      const signingKey = await Video.SigningKeys.create();\n\n      expect(signingKey.id).to.exist;\n      expect(signingKey.private_key).to.exist;\n      expect(signingKey.created_at).to.exist;\n      await Video.SigningKeys.del(signingKey.id);\n      nockDone();\n    });\n  });\n\n  /** @test {SigningKeys.get} */\n  describe('SigningKeys.get', () => {\n    /** @test {SigningKeys.get} */\n    it('retrieves a signing key', async () => {\n      const { nockDone } = await nockBack('SigningKeys/get.json');\n      const createdSigningKey = await Video.SigningKeys.create();\n\n      const signingKey = await Video.SigningKeys.get(createdSigningKey.id);\n      expect(signingKey.id).to.exist;\n      expect(signingKey.created_at).to.exist;\n      expect(signingKey.private_key).to.not.exist;\n      await Video.SigningKeys.del(createdSigningKey.id);\n      nockDone();\n    });\n  });\n\n  /** @test {SigningKeys.del} */\n  describe('SigningKeys.del', () => {\n    /** @test {SigningKeys.del} */\n    it('deletes a signing key', async () => {\n      const { nockDone } = await nockBack('SigningKeys/del.json');\n      const createdSigningKey = await Video.SigningKeys.create();\n\n      const signingKey = await Video.SigningKeys.del(createdSigningKey.id);\n      expect(signingKey).to.be.empty;\n\n      try {\n        await Video.SigningKeys.get(createdSigningKey.id);\n      } catch (err) {\n        expect(err.type).to.eq('not_found');\n        nockDone();\n      }\n    });\n  });\n\n  /** @test {SigningKeys.list} */\n  describe('SigningKeys.list', () => {\n    /** @test {SigningKeys.list} */\n    it('lists signing keys', async () => {\n      const { nockDone } = await nockBack('SigningKeys/list.json');\n      const createdKey = await Video.SigningKeys.create();\n      const signingKeys = await Video.SigningKeys.list();\n      expect(signingKeys.length).to.be.greaterThan(0);\n      await Video.SigningKeys.del(createdKey.id);\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/signingKeys.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "test/integration/video/signingKeys.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120",
    "access": null,
    "description": "Integration:SigningKeys",
    "lineNumber": 7,
    "testTargets": [
      "SigningKeys"
    ]
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe121",
    "access": null,
    "description": "SigningKeys.create",
    "lineNumber": 12,
    "testTargets": [
      "SigningKeys.create"
    ]
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe121.it122",
    "access": null,
    "description": "creates a new signing key",
    "lineNumber": 14,
    "testTargets": [
      "SigningKeys.create"
    ]
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe123",
    "access": null,
    "description": "SigningKeys.get",
    "lineNumber": 27,
    "testTargets": [
      "SigningKeys.get"
    ]
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe123.it124",
    "access": null,
    "description": "retrieves a signing key",
    "lineNumber": 29,
    "testTargets": [
      "SigningKeys.get"
    ]
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe125",
    "access": null,
    "description": "SigningKeys.del",
    "lineNumber": 43,
    "testTargets": [
      "SigningKeys.del"
    ]
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe125.it126",
    "access": null,
    "description": "deletes a signing key",
    "lineNumber": 45,
    "testTargets": [
      "SigningKeys.del"
    ]
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe127",
    "access": null,
    "description": "SigningKeys.list",
    "lineNumber": 62,
    "testTargets": [
      "SigningKeys.list"
    ]
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/integration/video/signingKeys.spec.js~describe120.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/signingKeys.spec.js~describe120.describe127.it128",
    "access": null,
    "description": "lists signing keys",
    "lineNumber": 64,
    "testTargets": [
      "SigningKeys.list"
    ]
  },
  {
    "__docId__": 189,
    "kind": "testFile",
    "name": "test/integration/video/uploads.spec.js",
    "content": "const { expect } = require('chai');\nconst nockBack = require('nock').back;\nconst Mux = require('../../../dist');\n\n/** @test {Uploads} */\ndescribe('Integration::Uploads', () => {\n  const muxClient = new Mux();\n  const { Video } = muxClient;\n\n  /** @test {Uploads.create} */\n  describe('Uploads.create', () => {\n    /** @test {Uploads.create} */\n    it('creates an upload', async () => {\n      const { nockDone } = await nockBack('Uploads/create.json');\n      const upload = await Video.Uploads.create({\n        new_asset_settings: { playback_policy: 'public' },\n      });\n      expect(upload.status).to.equal('waiting');\n      expect(upload.id).to.exist;\n      await Video.Uploads.cancel(upload.id);\n      nockDone();\n    });\n  });\n\n  /** @test {Uploads.cancel} */\n  describe('Uploads.cancel', () => {\n    /** @test {Uploads.cancel} */\n    it('cancels an upload', async () => {\n      const { nockDone } = await nockBack('Uploads/cancel.json');\n      const upload = await Video.Uploads.create({\n        new_asset_settings: { playback_policy: 'public' },\n      });\n      await Video.Uploads.cancel(upload.id);\n      const updatedUpload = await Video.Uploads.get(upload.id);\n      expect(updatedUpload.status).to.equal('cancelled');\n      nockDone();\n    });\n\n    /** @test {Uploads.cancel} */\n    it('fails to delete an upload when given an incorrect upload id', () =>\n      Video.Uploads.cancel('somefakeid').catch((err) => expect(err).to.exist));\n  });\n\n  /** @test {Uploads.get} */\n  describe('Uploads.get', () => {\n    /** @test {Uploads.get} */\n    it('gets an upload', async () => {\n      const { nockDone } = await nockBack('Uploads/get.json');\n      const testUpload = await Video.Uploads.create({\n        new_asset_settings: { playback_policy: 'public' },\n      });\n      const upload = await Video.Uploads.get(testUpload.id);\n      expect(upload.id).to.equal(testUpload.id);\n      await Video.Uploads.cancel(testUpload.id);\n      nockDone();\n    });\n\n    /** @test {Uploads.get} */\n    it('fails to get an upload when given an incorrect upload id', () =>\n      Video.Uploads.get('somefakeid').catch((err) => expect(err).to.exist));\n  });\n\n  /** @test {Uploads.list} */\n  describe('Uploads.list', () => {\n    /** @test {Uploads.list} */\n    it('lists all uploads for an environment', async () => {\n      const { nockDone } = await nockBack('Uploads/list.json');\n      const assets = await Video.Uploads.list();\n      expect(assets).to.be.an('array');\n      nockDone();\n    });\n\n    it('lists 5 uploads for an environment', async () => {\n      const { nockDone } = await nockBack('Uploads/listLimit.json');\n      const assets = await Video.Uploads.list({ limit: 5 });\n      expect(assets).to.be.an('array');\n      nockDone();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/integration/video/uploads.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "test/integration/video/uploads.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129",
    "access": null,
    "description": "Integration::Uploads",
    "lineNumber": 7,
    "testTargets": [
      "Uploads"
    ]
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/integration/video/uploads.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe130",
    "access": null,
    "description": "Uploads.create",
    "lineNumber": 12,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe130",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe130.it131",
    "access": null,
    "description": "creates an upload",
    "lineNumber": 14,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/integration/video/uploads.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe132",
    "access": null,
    "description": "Uploads.cancel",
    "lineNumber": 27,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe132.it133",
    "access": null,
    "description": "cancels an upload",
    "lineNumber": 29,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe132.it134",
    "access": null,
    "description": "fails to delete an upload when given an incorrect upload id",
    "lineNumber": 41,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "describe135",
    "testId": 135,
    "memberof": "test/integration/video/uploads.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe135",
    "access": null,
    "description": "Uploads.get",
    "lineNumber": 46,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe135.it136",
    "access": null,
    "description": "gets an upload",
    "lineNumber": 48,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe135",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe135.it137",
    "access": null,
    "description": "fails to get an upload when given an incorrect upload id",
    "lineNumber": 60,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe138",
    "testId": 138,
    "memberof": "test/integration/video/uploads.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe138",
    "access": null,
    "description": "Uploads.list",
    "lineNumber": 65,
    "testTargets": [
      "Uploads.list"
    ]
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe138.it139",
    "access": null,
    "description": "lists all uploads for an environment",
    "lineNumber": 67,
    "testTargets": [
      "Uploads.list"
    ]
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/integration/video/uploads.spec.js~describe129.describe138",
    "testDepth": 2,
    "static": true,
    "longname": "test/integration/video/uploads.spec.js~describe129.describe138.it140",
    "access": null,
    "description": "lists 5 uploads for an environment",
    "lineNumber": 74
  },
  {
    "__docId__": 202,
    "kind": "testFile",
    "name": "test/unit/base.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { Base } = require('../../dist/base');\n\n/** @test {Mux} */\ndescribe('Unit::Base', () => {\n  /** @test {Base} */\n  describe('Base', () => {\n    /** @test {Base} */\n    it('allows configuration to be passed in as params', () => {\n      const baseClient = new Base('testKey', 'testSecret');\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('allows configuration to be passed in via environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'testKey';\n      process.env.MUX_TOKEN_SECRET = 'testSecret';\n      const baseClient = new Base();\n      expect(baseClient.tokenId).to.be.eq('testKey');\n      expect(baseClient.tokenSecret).to.be.eq('testSecret');\n    });\n\n    it('prioritizes params over environment variables', () => {\n      process.env.MUX_TOKEN_ID = 'crusty-old-id';\n      process.env.MUX_TOKEN_SECRET = 'crusty-old-secret';\n      const baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n      expect(baseClient.tokenId).to.be.eq('fancy-new-id');\n      expect(baseClient.tokenSecret).to.be.eq('fancy-new-secret');\n    });\n\n    it('allows configuration to be passed in via the parent instance', () => {\n      const parentBase = new Base('testKey', 'testSecret');\n      const childBase = new Base(parentBase);\n      expect(childBase.tokenId).to.be.eq(parentBase.tokenId);\n      expect(childBase.tokenSecret).to.be.eq(parentBase.tokenSecret);\n    });\n\n    describe('http requests', () => {\n      let baseClient;\n\n      beforeEach(() => {\n        baseClient = new Base('fancy-new-id', 'fancy-new-secret');\n        moxios.install(baseClient.http);\n\n        moxios.stubRequest('/test/v1/foo', {\n          status: 200,\n          responseText: '{\"data\": [\"something\", \"very\", \"fun\"]}',\n        });\n      });\n\n      afterEach(() => {\n        delete process.env.MUX_TOKEN_ID;\n        delete process.env.MUX_TOKEN_SECRET;\n        moxios.uninstall(baseClient.http);\n      });\n\n      it('fire an event on a request', (done) => {\n        baseClient.on('request', (req) => {\n          expect(req.auth.username).to.equal('fancy-new-id');\n          expect(req.auth.password).to.equal('fancy-new-secret');\n          expect(req.baseURL).to.equal('https://api.mux.com');\n          expect(req.url).to.equal('/test/v1/foo');\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n\n      it('fire an event on a response', (done) => {\n        baseClient.on('response', (res) => {\n          expect(res.status).to.equal(200);\n          expect(res.data).to.eql({ data: ['something', 'very', 'fun'] });\n          done();\n        });\n\n        baseClient.http.get('/test/v1/foo');\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/base.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "test/unit/base.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141",
    "access": null,
    "description": "Unit::Base",
    "lineNumber": 8,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/unit/base.spec.js~describe141",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142",
    "access": null,
    "description": "Base",
    "lineNumber": 10,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/unit/base.spec.js~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.it143",
    "access": null,
    "description": "allows configuration to be passed in as params",
    "lineNumber": 12,
    "testTargets": [
      "Base"
    ]
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/unit/base.spec.js~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.it144",
    "access": null,
    "description": "allows configuration to be passed in via environment variables",
    "lineNumber": 18
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/base.spec.js~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.it145",
    "access": null,
    "description": "prioritizes params over environment variables",
    "lineNumber": 26
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/base.spec.js~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.it146",
    "access": null,
    "description": "allows configuration to be passed in via the parent instance",
    "lineNumber": 34
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/unit/base.spec.js~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.describe147",
    "access": null,
    "description": "http requests",
    "lineNumber": 41
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/unit/base.spec.js~describe141.describe142.describe147",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.describe147.it148",
    "access": null,
    "description": "fire an event on a request",
    "lineNumber": 60
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/unit/base.spec.js~describe141.describe142.describe147",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/base.spec.js~describe141.describe142.describe147.it149",
    "access": null,
    "description": "fire an event on a response",
    "lineNumber": 72
  },
  {
    "__docId__": 212,
    "kind": "testFile",
    "name": "test/unit/data/data.spec.js",
    "content": "const { expect } = require('chai');\nconst { Data } = require('../../../dist/data/data');\nconst { Metrics } = require('../../../dist/data/resources/metrics');\nconst { Filters } = require('../../../dist/data/resources/filters');\nconst { Errors } = require('../../../dist/data/resources/errors');\nconst { VideoViews } = require('../../../dist/data/resources/video_views');\nconst { Exports } = require('../../../dist/data/resources/exports');\nconst { Incidents } = require('../../../dist/data/resources/incidents');\n\n/** @test {Data} */\ndescribe('Unit::Data', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Data} */\n  describe('Data', () => {\n    /** @test {Data} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Data()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Data} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Data(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Data} */\n    it('creates a new Data instance', () => {\n      const TestData = new Data(testApiKey, testSecret);\n      expect(() => new Data(testApiKey, testSecret)).to.not.throw();\n      expect(TestData.Metrics).to.be.an.instanceof(Metrics);\n      expect(TestData.Errors).to.be.an.instanceof(Errors);\n      expect(TestData.Exports).to.be.an.instanceof(Exports);\n      expect(TestData.VideoViews).to.be.an.instanceof(VideoViews);\n      expect(TestData.Filters).to.be.an.instanceof(Filters);\n      expect(TestData.Incidents).to.be.an.instanceof(Incidents);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/data.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "describe150",
    "testId": 150,
    "memberof": "test/unit/data/data.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe150",
    "access": null,
    "description": "Unit::Data",
    "lineNumber": 19,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/unit/data/data.spec.js~describe150",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe150.describe151",
    "access": null,
    "description": "Data",
    "lineNumber": 24,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/unit/data/data.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe150.describe151.it152",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 26,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/unit/data/data.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe150.describe151.it153",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/unit/data/data.spec.js~describe150.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/data.spec.js~describe150.describe151.it154",
    "access": null,
    "description": "creates a new Data instance",
    "lineNumber": 38,
    "testTargets": [
      "Data"
    ]
  },
  {
    "__docId__": 218,
    "kind": "testFile",
    "name": "test/unit/data/resources/errors.spec.js",
    "content": "const moxios = require('moxios');\nconst { Errors } = require('../../../../dist/data/resources/errors');\n\n/** @test {Errors} */\ndescribe('Unit::Errors', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const errorsInstance = new Errors(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(errorsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(errorsInstance.http);\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/errors.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "test/unit/data/resources/errors.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/errors.spec.js~describe155",
    "access": null,
    "description": "Unit::Errors",
    "lineNumber": 6,
    "testTargets": [
      "Errors"
    ]
  },
  {
    "__docId__": 220,
    "kind": "testFile",
    "name": "test/unit/data/resources/exports.spec.js",
    "content": "const moxios = require('moxios');\nconst { Exports } = require('../../../../dist/data/resources/exports');\n\n/** @test {Exports} */\ndescribe('Unit::Exports', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const exportsInstance = new Exports(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(exportsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(exportsInstance.http);\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/exports.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/unit/data/resources/exports.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/exports.spec.js~describe156",
    "access": null,
    "description": "Unit::Exports",
    "lineNumber": 6,
    "testTargets": [
      "Exports"
    ]
  },
  {
    "__docId__": 222,
    "kind": "testFile",
    "name": "test/unit/data/resources/filters.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { Filters } = require('../../../../dist/data/resources/filters');\n\n/** @test {Filters} */\ndescribe('Unit::Filters', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const filtersInstance = new Filters(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(filtersInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(filtersInstance.http);\n  });\n\n  /** @test {Filters} */\n  describe('Filters', () => {\n    /** @test {Filters} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Filters()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Filters} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Filters(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Filters} */\n    it('creates a new Filters instance', () => {\n      const TestFilters = new Filters(testApiKey, testSecret);\n      expect(() => new Filters(testApiKey, testSecret)).to.not.throw();\n      expect(TestFilters.tokenId).to.equal(testApiKey);\n      expect(TestFilters.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Filters.get} */\n  describe('Filters.get', () => {\n    /** @test {Filters.get} */\n    it('throws an error if a filter Id is not provided', () => {\n      expect(() => filtersInstance.get()).to.throw(\n        'Filter Id is required to get filter information.'\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/filters.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "describe157",
    "testId": 157,
    "memberof": "test/unit/data/resources/filters.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157",
    "access": null,
    "description": "Unit::Filters",
    "lineNumber": 8,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe158",
    "access": null,
    "description": "Filters",
    "lineNumber": 22,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157.describe158",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe158.it159",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 24,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157.describe158",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe158.it160",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157.describe158",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe158.it161",
    "access": null,
    "description": "creates a new Filters instance",
    "lineNumber": 38,
    "testTargets": [
      "Filters"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe162",
    "access": null,
    "description": "Filters.get",
    "lineNumber": 47,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/unit/data/resources/filters.spec.js~describe157.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/filters.spec.js~describe157.describe162.it163",
    "access": null,
    "description": "throws an error if a filter Id is not provided",
    "lineNumber": 49,
    "testTargets": [
      "Filters.get"
    ]
  },
  {
    "__docId__": 230,
    "kind": "testFile",
    "name": "test/unit/data/resources/incidents.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst sinon = require('sinon');\nconst { Incidents } = require('../../../../dist/data/resources/incidents');\n\n/** @test {Incidents} */\ndescribe('Unit::Incidents', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const incidentsInstance = new Incidents(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(incidentsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(incidentsInstance.http);\n  });\n\n  /** @test {Incidents} */\n  describe('Incidents', () => {\n    /** @test {Incidents} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Incidents()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Incidents} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Incidents(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Incidents} */\n    it('creates a new Incidents instance', () => {\n      const TestIncidents = new Incidents(testApiKey, testSecret);\n      expect(() => new Incidents(testApiKey, testSecret)).to.not.throw();\n      expect(TestIncidents.tokenId).to.equal(testApiKey);\n      expect(TestIncidents.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Incidents.get} */\n  describe('Incidents.get', () => {\n    /** @test {Incidents.get} */\n    it('throws an error if an incident Id is not provided', () => {\n      expect(() => incidentsInstance.get()).to.throw(\n        'An incident id is required for incident details.'\n      );\n    });\n  });\n\n  /** @test {Incidents.related} */\n  describe('Incidents.related', () => {\n    /** @test {Incidents.related} */\n    it('throws an error if an incident Id is not provided', () => {\n      expect(() => incidentsInstance.related()).to.throw(\n        'An incident id is required for related incidents.'\n      );\n    });\n\n    it('makes a get request to the Mux data incidents route', (done) => {\n      moxios.stubRequest('/data/v1/incidents/abc123/related', {\n        status: 200,\n        responseText: '{\"data\": {\"incidents\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      incidentsInstance.related('abc123').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].data.incidents).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/incidents.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "test/unit/data/resources/incidents.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164",
    "access": null,
    "description": "Unit::Incidents",
    "lineNumber": 9,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe165",
    "access": null,
    "description": "Incidents",
    "lineNumber": 23,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe165.it166",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 25,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe165.it167",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 32,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe165.it168",
    "access": null,
    "description": "creates a new Incidents instance",
    "lineNumber": 39,
    "testTargets": [
      "Incidents"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe169",
    "access": null,
    "description": "Incidents.get",
    "lineNumber": 48,
    "testTargets": [
      "Incidents.get"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe169.it170",
    "access": null,
    "description": "throws an error if an incident Id is not provided",
    "lineNumber": 50,
    "testTargets": [
      "Incidents.get"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe171",
    "access": null,
    "description": "Incidents.related",
    "lineNumber": 58,
    "testTargets": [
      "Incidents.related"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe171.it172",
    "access": null,
    "description": "throws an error if an incident Id is not provided",
    "lineNumber": 60,
    "testTargets": [
      "Incidents.related"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/unit/data/resources/incidents.spec.js~describe164.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/incidents.spec.js~describe164.describe171.it173",
    "access": null,
    "description": "makes a get request to the Mux data incidents route",
    "lineNumber": 66
  },
  {
    "__docId__": 241,
    "kind": "testFile",
    "name": "test/unit/data/resources/metrics.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { Metrics } = require('../../../../dist/data/resources/metrics');\n\n/** @test {Metrics} */\ndescribe('Unit::Metrics', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const metricsInstance = new Metrics(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(metricsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(metricsInstance.http);\n  });\n\n  /** @test {Metrics} */\n  describe('Metrics', () => {\n    /** @test {Metrics} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Metrics()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {Metrics} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Metrics(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Metrics} */\n    it('creates a new Metrics instance', () => {\n      const TestMetrics = new Metrics(testApiKey, testSecret);\n      expect(() => new Metrics(testApiKey, testSecret)).to.not.throw();\n      expect(TestMetrics.tokenId).to.equal(testApiKey);\n      expect(TestMetrics.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Metrics.comparison} */\n  describe('Metrics.comparison', () => {\n    /** @test {Metrics.comparison} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => metricsInstance.comparison()).to.throw(\n        'The value query parameter is required for comparing metrics'\n      );\n      expect(() => metricsInstance.comparison({})).to.throw(\n        'The value query parameter is required for comparing metrics'\n      );\n    });\n  });\n\n  /** @test {Metrics.insights} */\n  describe('Metrics.insights', () => {\n    /** @test {Metrics.insights} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.insights()).to.throw(\n        'A metric Id is required for insight metrics.'\n      );\n    });\n  });\n\n  /** @test {Metrics.overall} */\n  describe('Metrics.overall', () => {\n    /** @test {Metrics.overall} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.overall()).to.throw(\n        'A metric Id is required for overall metrics.'\n      );\n    });\n  });\n\n  /** @test {Metrics.timeseries} */\n  describe('Metrics.timeseries', () => {\n    /** @test {Metrics.timeseries} */\n    it('throws an error if a metric Id is not provided', () => {\n      expect(() => metricsInstance.timeseries()).to.throw(\n        'A metric Id is required for timeseries metrics.'\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/metrics.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "test/unit/data/resources/metrics.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174",
    "access": null,
    "description": "Unit::Metrics",
    "lineNumber": 8,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe175",
    "access": null,
    "description": "Metrics",
    "lineNumber": 22,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe175.it176",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 24,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe175.it177",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe175.it178",
    "access": null,
    "description": "creates a new Metrics instance",
    "lineNumber": 38,
    "testTargets": [
      "Metrics"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe179",
    "access": null,
    "description": "Metrics.comparison",
    "lineNumber": 47,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe179.it180",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 49,
    "testTargets": [
      "Metrics.comparison"
    ]
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe181",
    "access": null,
    "description": "Metrics.insights",
    "lineNumber": 60,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe181.it182",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 62,
    "testTargets": [
      "Metrics.insights"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe183",
    "access": null,
    "description": "Metrics.overall",
    "lineNumber": 70,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe183.it184",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 72,
    "testTargets": [
      "Metrics.overall"
    ]
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe185",
    "access": null,
    "description": "Metrics.timeseries",
    "lineNumber": 80,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/unit/data/resources/metrics.spec.js~describe174.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/metrics.spec.js~describe174.describe185.it186",
    "access": null,
    "description": "throws an error if a metric Id is not provided",
    "lineNumber": 82,
    "testTargets": [
      "Metrics.timeseries"
    ]
  },
  {
    "__docId__": 255,
    "kind": "testFile",
    "name": "test/unit/data/resources/real_time.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { RealTime } = require('../../../../dist/data/resources/real_time');\n\n/** @test {RealTime} */\ndescribe('Unit::RealTime', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const realTimeInstance = new RealTime(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(realTimeInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(realTimeInstance.http);\n  });\n\n  /** @test {RealTime} */\n  describe('RealTime', () => {\n    /** @test {RealTime} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new RealTime()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {RealTime} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new RealTime(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {RealTime} */\n    it('creates a new RealTime instance', () => {\n      const TestMetrics = new RealTime(testApiKey, testSecret);\n      expect(() => new RealTime(testApiKey, testSecret)).to.not.throw();\n      expect(TestMetrics.tokenId).to.equal(testApiKey);\n      expect(TestMetrics.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {RealTime.breakdown} */\n  describe('RealTime.breakdown', () => {\n    /** @test {RealTime.breakdown} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.breakdown()).to.throw(\n        'A metric Id is required for real-time breakdown information'\n      );\n      expect(() => realTimeInstance.breakdown({})).to.throw(\n        'The dimension query parameter is required for real-time breakdown information'\n      );\n    });\n  });\n\n  /** @test {RealTime.histogramTimeseries} */\n  describe('RealTime.histogramTimeseries', () => {\n    /** @test {RealTime.histogramTimeseries} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.histogramTimeseries()).to.throw(\n        'A metric Id is required for real-time histogram timeseries information'\n      );\n    });\n  });\n\n  /** @test {RealTime.timeseries} */\n  describe('RealTime.timeseries', () => {\n    /** @test {RealTime.timeseries} */\n    it('throws an error if the value query parameter is not provided', () => {\n      expect(() => realTimeInstance.timeseries()).to.throw(\n        'A metric Id is required for real-time timeseries information'\n      );\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/real_time.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/unit/data/resources/real_time.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187",
    "access": null,
    "description": "Unit::RealTime",
    "lineNumber": 8,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe188",
    "testId": 188,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe188",
    "access": null,
    "description": "RealTime",
    "lineNumber": 22,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe188.it189",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 24,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe188.it190",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe188.it191",
    "access": null,
    "description": "creates a new RealTime instance",
    "lineNumber": 38,
    "testTargets": [
      "RealTime"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe192",
    "access": null,
    "description": "RealTime.breakdown",
    "lineNumber": 47,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe192.it193",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 49,
    "testTargets": [
      "RealTime.breakdown"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe194",
    "access": null,
    "description": "RealTime.histogramTimeseries",
    "lineNumber": 60,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe194.it195",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 62,
    "testTargets": [
      "RealTime.histogramTimeseries"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe196",
    "access": null,
    "description": "RealTime.timeseries",
    "lineNumber": 70,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/unit/data/resources/real_time.spec.js~describe187.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/real_time.spec.js~describe187.describe196.it197",
    "access": null,
    "description": "throws an error if the value query parameter is not provided",
    "lineNumber": 72,
    "testTargets": [
      "RealTime.timeseries"
    ]
  },
  {
    "__docId__": 267,
    "kind": "testFile",
    "name": "test/unit/data/resources/video_views.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { VideoViews } = require('../../../../dist/data/resources/video_views');\n\n/** @test {VideoViews} */\ndescribe('Unit::VideoViews', () => {\n  const testApiKey = 'testKey';\n  const testSecret = 'testSecret';\n  const videoViewsInstance = new VideoViews(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(videoViewsInstance.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(videoViewsInstance.http);\n  });\n\n  /** @test {VideoViews} */\n  describe('VideoViews', () => {\n    /** @test {VideoViews} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new VideoViews()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {VideoViews} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new VideoViews(testApiKey)).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {VideoViews} */\n    it('creates a new VideoViews instance', () => {\n      const TestVideoViews = new VideoViews(testApiKey, testSecret);\n      expect(() => new VideoViews(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideoViews.tokenId).to.equal(testApiKey);\n      expect(TestVideoViews.tokenSecret).to.equal(testSecret);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/data/resources/video_views.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "describe198",
    "testId": 198,
    "memberof": "test/unit/data/resources/video_views.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe198",
    "access": null,
    "description": "Unit::VideoViews",
    "lineNumber": 8,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe199",
    "testId": 199,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe198",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe198.describe199",
    "access": null,
    "description": "VideoViews",
    "lineNumber": 22,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe198.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe198.describe199.it200",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 24,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe198.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe198.describe199.it201",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/unit/data/resources/video_views.spec.js~describe198.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/data/resources/video_views.spec.js~describe198.describe199.it202",
    "access": null,
    "description": "creates a new VideoViews instance",
    "lineNumber": 38,
    "testTargets": [
      "VideoViews"
    ]
  },
  {
    "__docId__": 273,
    "kind": "testFile",
    "name": "test/unit/mux.spec.js",
    "content": "const { expect } = require('chai');\nconst { Mux } = require('../../dist/mux');\nconst MuxVideo = require('../../dist/video/video').Video;\nconst MuxData = require('../../dist/data/data').Data;\n\n/** @test {Mux} */\ndescribe('Unit::Mux', () => {\n  /** @test {Mux} */\n  describe('Mux', () => {\n    /** @test {Mux} */\n    it('exposes Mux Video and Data as instance methods', () => {\n      const muxClient = new Mux('testKey', 'testSecret');\n      const { Video, Data } = muxClient;\n      expect(Video).to.to.be.an.instanceof(MuxVideo);\n      expect(Data).to.to.be.an.instanceof(MuxData);\n    });\n\n    /** @test {Mux.JTW} */\n    it('exposes JWT Helper utilities as static methods', () => {\n      expect(Mux.JWT.sign).to.be.a('function');\n      expect(Mux.JWT.decode).to.be.a('function');\n    });\n\n    /** @test {Mux.Webhooks} */\n    it('exposes Webhooks.verifyHeader', () => {\n      expect(Mux.Webhooks.verifyHeader).to.be.a('function');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/mux.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe203",
    "testId": 203,
    "memberof": "test/unit/mux.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe203",
    "access": null,
    "description": "Unit::Mux",
    "lineNumber": 9,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "test/unit/mux.spec.js~describe203",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe203.describe204",
    "access": null,
    "description": "Mux",
    "lineNumber": 11,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/unit/mux.spec.js~describe203.describe204",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe203.describe204.it205",
    "access": null,
    "description": "exposes Mux Video and Data as instance methods",
    "lineNumber": 13,
    "testTargets": [
      "Mux"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/unit/mux.spec.js~describe203.describe204",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe203.describe204.it206",
    "access": null,
    "description": "exposes JWT Helper utilities as static methods",
    "lineNumber": 21,
    "testTargets": [
      "Mux.JTW"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/unit/mux.spec.js~describe203.describe204",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/mux.spec.js~describe203.describe204.it207",
    "access": null,
    "description": "exposes Webhooks.verifyHeader",
    "lineNumber": 27,
    "testTargets": [
      "Mux.Webhooks"
    ]
  },
  {
    "__docId__": 279,
    "kind": "testFile",
    "name": "test/unit/utils/jwt.spec.js",
    "content": "const { expect } = require('chai');\nconst path = require('path');\nconst { JWT } = require('../../../dist/utils/jwt');\n\nconst TEST_ID = '01XNj9qIpoW3eU1sED8EqrFRy01J3VTZ01x';\nconst TEST_SECRET =\n  ' LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNGdoaERZN25QTzFhMmxibHN0T3JTcmt3VUdkdzVaT0tjR0h5U2NkWXpoc1FudHNnCkw4VWxHcURScVhuZFZ2Ky9rMEI2MnZxbzJGT1gvYkdVK2srT2lRang4UCswNVJKOWEyL1lpSzJjQm56MG15WEEKOS9CajRVNis1d3dCUk15Z2xCd2VaeWt1ZVNsZ1dYYnZRRm50bE1LcXptYU5XcnJvSDNpVEJZUU9xeFF5dHdkZApaSXlVeTYwNDJUMXJaQm5WOVN3RzA0UEhjaVJ3TjJ3Ly83YVhMY2FGRnJTOUVxZ29SNGszcjllblN1YWM3STRvCmV5NVJwMmFaVXlzK3U1VnMwUzluMzIzWVViMWZtRU1kZzEyWU1yMHIyL2Q5ZjMrdVZXQVVUTkQ1MitSREsvZ00KOEt6dW5FZ2w5eWFacit6VlFpa0RhOFoyOE9yOUxrN0xNNk5TNlFJREFRQUJBb0lCQURPbXRvYmlvUFRMU0hlYwpZK0Q1ZmFzVnBuUzVMcE5IbzlzS2h0TlZPblhldVcyVHBVZEZSYlZRQ3BrdnYrU2hqS1dabG5senppR2crSnFBCmVncTVJMWt0TWh4Z1VuWUdRNkxKYkRIUGVsZ0JOZVErUEZwc0ZHYm9GN2UwaHBXeUxQK3JiVWNsb2ZrTiszWjIKTnpYOVZzMG5ydUI3anRHczVGNU1yMHdUWVVhMmFNSHU2dnNNZFNYY00rZTVZS3FCQ3Z3dS9MZ0ZvVFE1YXh0RQo0ZzJYbU91YUQrSFBPU0o1T0Mwc3grK1RkbXBNL1lMK3RjVjZZNVBWbUFMUURMcmFJdU9UM01lcUlicElvRlZQCmcxeldSOTBqb3BKWVpLSVFoNEY4WE4xODR1bmZ6bjVJbW1JdktOWE9QSU1YMk1oekw2YU5rSXZ5YmdpWUIvVGwKMm5vdVNBRUNnWUVBNHlzZmVZL0h3Rkl4Vy9MZ2R3UHJubDR4aGkwRkFWeE1QK1k0alhYUHU1bklXS3dvUk1xbgplTEd6UnhESnlhQmN5NXgzVjFhTmYwblV1YzJqRUM2Yi9XUUo2VWJMUzJvK2J1NmdJR1NsbmxLWS9uSlJGTnpwClE0d0F1c1J3M2dTVi9FNW12QVJiYk1vQ3Rha3FxdXhhWlMzODQ1MEFaQkxqcm1kZDU1VlFPUVVDZ1lFQS9yaGIKRm9oVmdxZzY0QjFpU0FCc3dYdTdLNzZHQUN4ZEg0MmxoVjQvNktiUVRVNnFwRWxVZURwbWlVeUkxeVBxZ1MwbApLYS9XMGg5VDI5S0Z1bVlFOWdlUG02b0ZaZjIvQ0RnaWtTWHdQTk5kRWp2SmtrMXdnb3dLbDNNbUhuWGtTYUlZCmpYVG9Td2tmN2RJREhVRXQ3RnRVd1VsQXROM3N4TFcvWlVKSEI1VUNnWUFMOXkyRlBhbUwyOGgxeTJrL1c1bUIKa2Z5UjBMVSt5Um5MRTlsT3VqSGk4OHExd1B1dUErNm1VTlhjbkduRWtRblNQNytaZmhtZDVzbXByOGN6QndGNAphMWlLVFF4UVFKeGhRM2h6dkZsczZYVGRraS9ySldlMEF4L1d0cG9yVjVwKzI3SlZuUFVqMmRBaXVYSmg1bWtzCmd5dWE0WjR2cHo4TzVLcnhrOC9SOFFLQmdRQ1BJbE4xTHZrMktZaWtCWDhEek5GUVRGSWFPNzZhL0ZMNzl5R3EKOXhKY2p0aUFpSk1WTEd1OS83czhyZmc3Uk9CeTVFWjh6V1dldjZIazVjRGx4SXhISUdxUFk1UVRBdXJGR0o0OApDQ0NlWFh0d1VvNXJtdjU5TFdxS1BsZU9TRnNYRVhKUWt3QXhvaGdDRU1CVlFSb29OZzVEYXdGa1lVeTZJUk5ECk9HSW5uUUtCZ1FDeWo1UVU3YjcycktVaWlhTisxaExrVEJFQUFab01jRjY4Ukp5Mlh5VXo5bVJQK1hLMkthbHoKbVdXNFh2RHZoVlB1T25tNjJ1RkxURCsybG1mNjdwUlY3bHlSVWlycVFabzNUVmsweE8yS3JJV21uRm1EZzBSRQp6YnB6MVJsZy9ZVjhQU3E4alE3ZUFsRUs0RHRSdlVoQW5RRU52NlVyVjltRnRjR1k0ZFhSUmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=';\n\n/** @test {Mux.Utils.JWT} */\ndescribe('Utils::JWT', () => {\n  /** @test {Mux.Utils.JWT.sign} */\n  describe('sign', () => {\n    /** @test {Mux.Utils.JWT.sign} */\n    it('defaults to video and includes an expiration', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('v');\n      expect(decoded.exp).to.be.greaterThan(new Date().getTime() / 1000);\n    });\n\n    it('maps type video to v', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'video',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('v');\n    });\n\n    it('maps type thumbnail to t', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'thumbnail',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('t');\n    });\n\n    it('maps type gif to g', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'gif',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('maps type storyboard to s', () => {\n      const options = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        type: 'storyboard',\n      };\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('s');\n    });\n\n    it('takes a file path for a secret', () => {\n      const options = {\n        keyId: TEST_ID,\n        keyFilePath: path.join(__dirname, 'example-private-key.pem'),\n        type: 'gif',\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('falls back to using environment variables for the key and secret', () => {\n      process.env.MUX_SIGNING_KEY = TEST_ID;\n      process.env.MUX_PRIVATE_KEY = TEST_SECRET;\n      const options = {\n        type: 'gif',\n      };\n\n      const token = JWT.sign('some-playback-id', options);\n      expect(token).to.be.a('string');\n      const decoded = JWT.decode(token);\n      expect(decoded.aud).to.eq('g');\n    });\n\n    it('accepts a timestamp or time shorthand', () => {\n      const options1 = {\n        keyId: TEST_ID,\n        keySecret: TEST_SECRET,\n        expiration: '3h',\n      };\n\n      const options2 = {\n        ...options1,\n        expiration: 60 * 60 * 3,\n      };\n\n      const token1 = JWT.sign('some-playback-id', options1);\n      const token2 = JWT.sign('some-playback-id', options2);\n      expect(token1).to.be.a('string');\n      expect(token2).to.be.a('string');\n\n      const decoded1 = JWT.decode(token1);\n      const decoded2 = JWT.decode(token2);\n      expect(decoded1.exp).to.be.closeTo(decoded2.exp, 2);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/utils/jwt.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/unit/utils/jwt.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208",
    "access": null,
    "description": "Utils::JWT",
    "lineNumber": 12,
    "testTargets": [
      "Mux.Utils.JWT"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "describe209",
    "testId": 209,
    "memberof": "test/unit/utils/jwt.spec.js~describe208",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "access": null,
    "description": "sign",
    "lineNumber": 14,
    "testTargets": [
      "Mux.Utils.JWT.sign"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it210",
    "access": null,
    "description": "defaults to video and includes an expiration",
    "lineNumber": 16,
    "testTargets": [
      "Mux.Utils.JWT.sign"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it211",
    "access": null,
    "description": "maps type video to v",
    "lineNumber": 29
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it212",
    "access": null,
    "description": "maps type thumbnail to t",
    "lineNumber": 41
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it213",
    "access": null,
    "description": "maps type gif to g",
    "lineNumber": 53
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it214",
    "access": null,
    "description": "maps type storyboard to s",
    "lineNumber": 65
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it215",
    "access": null,
    "description": "takes a file path for a secret",
    "lineNumber": 77
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it216",
    "access": null,
    "description": "falls back to using environment variables for the key and secret",
    "lineNumber": 90
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/unit/utils/jwt.spec.js~describe208.describe209",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/jwt.spec.js~describe208.describe209.it217",
    "access": null,
    "description": "accepts a timestamp or time shorthand",
    "lineNumber": 103
  },
  {
    "__docId__": 290,
    "kind": "testFile",
    "name": "test/unit/video/resources/assets.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst { Assets } = require('../../../../dist/video/resources/assets');\n\n/** @test {Assets} */\ndescribe('Unit::Assets', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testAssets = new Assets(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testAssets.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testAssets.http);\n  });\n\n  /** @test {Assets} */\n  describe('Assets', () => {\n    /** @test {Assets} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Assets()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Assets} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Assets('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Assets} */\n    it('creates a new Assets instance', () => {\n      const TestAssets = new Assets(testApiKey, testSecret);\n      expect(() => new Assets(testApiKey, testSecret)).to.not.throw();\n      expect(TestAssets.tokenId).to.equal(testApiKey);\n      expect(TestAssets.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {Assets.create} */\n  describe('Assets.create', () => {\n    /** @test {Assets.create} */\n    it('throws an error if no asset params are given', () =>\n      testAssets.create().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal(\n          'Params are required for creating an asset'\n        );\n      }));\n  });\n\n  /** @test {Assets.get} */\n  describe('Assets.get', () => {\n    /** @test {Assets.get} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to get an asset'\n          );\n        }));\n  });\n\n  /** @test {Assets.del} */\n  describe('Assets.del', () => {\n    /** @test {Assets.del} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .del()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to delete an asset'\n          );\n        }));\n  });\n\n  /** @test {Assets.inputInfo} */\n  describe('Assets.inputInfo', () => {\n    /** @test {Assets.inputInfo} */\n    it('throws an error when an asset id is not given', () =>\n      testAssets\n        .inputInfo()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An asset ID is required to get input-info'\n          );\n        }));\n  });\n\n  /** @test {Assets.list} */\n  describe('Assets.list', () => {\n    /** @test {Assets.list} */\n    it('makes a GET request to list 100 assets offset by 2 pages', (done) => {\n      moxios.stubRequest('/video/v1/assets?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {Assets.deletePlaybackId} */\n  describe('Assets.deletePlaybackId', () => {\n    /** @test {Assets.deletePlaybackId} */\n    it('makes a DELETE request to delete a Playback Id for an asset', (done) => {\n      moxios.stubRequest(\n        '/video/v1/assets/testAsset/playback-ids/testPlaybackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"delete\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .deletePlaybackId('testAsset', 'testPlaybackId')\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.deletePlaybackId} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.deletePlaybackId().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n  });\n\n  /** @test {Assets.playbackId} */\n  describe('Assets.playbackId', () => {\n    /** @test {Assets.playbackId} */\n    it('makes a GET request to get a Playback Id for an asset', (done) => {\n      moxios.stubRequest(\n        '/video/v1/assets/testAsset/playback-ids/testPlaybackId',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"get\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      testAssets.playbackId('testAsset', 'testPlaybackId').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].get).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.playbackId().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n\n    /** @test {Assets.playbackId} */\n    it('throws an error if playbackId params are not given', () =>\n      testAssets.playbackId('assetid').catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A playback ID is required');\n      }));\n  });\n\n  /** @test {Assets.createTrack} */\n  describe('Assets.createTrack', () => {\n    /** @test {Assets.createTrack} */\n    it('makes a POST request to create a text track for an asset', (done) => {\n      moxios.stubRequest('/video/v1/assets/testAsset/tracks', {\n        status: 200,\n        responseText: '{\"data\": {\"create\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets\n        .createTrack('testAsset', {\n          url: 'https://example.com/myVIdeo_en.srt',\n          type: 'text',\n          text_type: 'subtitles',\n          language_code: 'en-US',\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].create).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.createTrack} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets\n        .createTrack()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('An asset ID is required');\n        }));\n\n    /** @test {Assets.createTrack} */\n    it('throws an error if track params are not given', () =>\n      testAssets\n        .createTrack('assetid')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal('Text track params are required');\n        }));\n  });\n\n  /** @test {Assets.deleteTrack} */\n  describe('Assets.deleteTrack', () => {\n    /** @test {Assets.deleteTrack} */\n    it('makes a DELETE request to delete a text track for an asset', (done) => {\n      moxios.stubRequest('/video/v1/assets/testAsset/tracks/testTrackId', {\n        status: 200,\n        responseText: '{\"data\": {\"delete\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testAssets.deleteTrack('testAsset', 'testTrackId').then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].delete).to.be.true;\n        done();\n      });\n    });\n\n    /** @test {Assets.deleteTrack} */\n    it('throws an error if an asset id is not given', () =>\n      testAssets.deleteTrack().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('An asset ID is required');\n      }));\n\n    /** @test {Assets.deleteTrack} */\n    it('throws an error if text track ID is not given', () =>\n      testAssets.deleteTrack('assetid').catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.equal('A track ID is required');\n      }));\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/assets.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "test/unit/video/resources/assets.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218",
    "access": null,
    "description": "Unit::Assets",
    "lineNumber": 9,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "describe219",
    "testId": 219,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe219",
    "access": null,
    "description": "Assets",
    "lineNumber": 23,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe219.it220",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 25,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe219.it221",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 30,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe219.it222",
    "access": null,
    "description": "creates a new Assets instance",
    "lineNumber": 37,
    "testTargets": [
      "Assets"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe223",
    "access": null,
    "description": "Assets.create",
    "lineNumber": 46,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe223.it224",
    "access": null,
    "description": "throws an error if no asset params are given",
    "lineNumber": 48,
    "testTargets": [
      "Assets.create"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "describe225",
    "testId": 225,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe225",
    "access": null,
    "description": "Assets.get",
    "lineNumber": 58,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe225",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe225.it226",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 60,
    "testTargets": [
      "Assets.get"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "describe227",
    "testId": 227,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe227",
    "access": null,
    "description": "Assets.del",
    "lineNumber": 75,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe227",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe227.it228",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 77,
    "testTargets": [
      "Assets.del"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe229",
    "testId": 229,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe229",
    "access": null,
    "description": "Assets.inputInfo",
    "lineNumber": 92,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe229.it230",
    "access": null,
    "description": "throws an error when an asset id is not given",
    "lineNumber": 94,
    "testTargets": [
      "Assets.inputInfo"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "describe231",
    "testId": 231,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe231",
    "access": null,
    "description": "Assets.list",
    "lineNumber": 109,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe231",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe231.it232",
    "access": null,
    "description": "makes a GET request to list 100 assets offset by 2 pages",
    "lineNumber": 111,
    "testTargets": [
      "Assets.list"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe233",
    "access": null,
    "description": "Assets.deletePlaybackId",
    "lineNumber": 128,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe233.it234",
    "access": null,
    "description": "makes a DELETE request to delete a Playback Id for an asset",
    "lineNumber": 130,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe233.it235",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 151,
    "testTargets": [
      "Assets.deletePlaybackId"
    ]
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe236",
    "access": null,
    "description": "Assets.playbackId",
    "lineNumber": 159,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe236.it237",
    "access": null,
    "description": "makes a GET request to get a Playback Id for an asset",
    "lineNumber": 161,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe236.it238",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 180,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe236",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe236.it239",
    "access": null,
    "description": "throws an error if playbackId params are not given",
    "lineNumber": 187,
    "testTargets": [
      "Assets.playbackId"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "describe240",
    "testId": 240,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe240",
    "access": null,
    "description": "Assets.createTrack",
    "lineNumber": 195,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe240.it241",
    "access": null,
    "description": "makes a POST request to create a text track for an asset",
    "lineNumber": 197,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe240.it242",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 220,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe240",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe240.it243",
    "access": null,
    "description": "throws an error if track params are not given",
    "lineNumber": 232,
    "testTargets": [
      "Assets.createTrack"
    ]
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe244",
    "testId": 244,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe244",
    "access": null,
    "description": "Assets.deleteTrack",
    "lineNumber": 245,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe244",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe244.it245",
    "access": null,
    "description": "makes a DELETE request to delete a text track for an asset",
    "lineNumber": 247,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe244",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe244.it246",
    "access": null,
    "description": "throws an error if an asset id is not given",
    "lineNumber": 263,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/unit/video/resources/assets.spec.js~describe218.describe244",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/assets.spec.js~describe218.describe244.it247",
    "access": null,
    "description": "throws an error if text track ID is not given",
    "lineNumber": 270,
    "testTargets": [
      "Assets.deleteTrack"
    ]
  },
  {
    "__docId__": 321,
    "kind": "testFile",
    "name": "test/unit/video/resources/deliveryUsage.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst {\n  DeliveryUsage,\n} = require('../../../../dist/video/resources/deliveryUsage');\n\n/** @test {DeliveryUsage} */\ndescribe('Unit::DeliveryUsage', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testDeliveryUsage = new DeliveryUsage(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testDeliveryUsage.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testDeliveryUsage.http);\n  });\n\n  /** @test {DeliveryUsage.list} */\n  describe('DeliveryUsage.list', () => {\n    /** @test {DeliveryUsage.list} */\n    it('makes a GET request to list 100 delivery usage records offset by 2 pages with a timeframe', (done) => {\n      moxios.stubRequest(\n        '/video/v1/delivery-usage?asset_id=123&limit=100&page=2&timeframe[]=1573471440&timeframe[]=1574076240',\n        {\n          status: 200,\n          responseText: '{\"data\": {\"list\": true}}',\n        }\n      );\n\n      const onFulfilled = sinon.spy();\n      const date1 =\n        new Date('Mon Nov 11 2019 03:24:00 GMT-0800 (PST)').valueOf() / 1000;\n      const date2 =\n        new Date('Mon Nov 18 2019 03:24:00 GMT-0800 (PST)').valueOf() / 1000;\n      testDeliveryUsage\n        .list({\n          asset_id: '123',\n          limit: 100,\n          page: 2,\n          timeframe: [date1, date2],\n        })\n        .then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/deliveryUsage.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe248",
    "testId": 248,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe248",
    "access": null,
    "description": "Unit::DeliveryUsage",
    "lineNumber": 11,
    "testTargets": [
      "DeliveryUsage"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe249",
    "testId": 249,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js~describe248",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe248.describe249",
    "access": null,
    "description": "DeliveryUsage.list",
    "lineNumber": 25,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "test/unit/video/resources/deliveryUsage.spec.js~describe248.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/deliveryUsage.spec.js~describe248.describe249.it250",
    "access": null,
    "description": "makes a GET request to list 100 delivery usage records offset by 2 pages with a timeframe",
    "lineNumber": 27,
    "testTargets": [
      "DeliveryUsage.list"
    ]
  },
  {
    "__docId__": 325,
    "kind": "testFile",
    "name": "test/unit/video/resources/liveStreams.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst { LiveStreams } = require('../../../../dist/video/resources/liveStreams');\n\n/** @test {LiveStreams} */\ndescribe('Unit::LiveStreams', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testLiveStreams = new LiveStreams(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testLiveStreams.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testLiveStreams.http);\n  });\n\n  /** @test {LiveStreams} */\n  describe('LiveStreams', () => {\n    /** @test {LiveStreams} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new LiveStreams()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {LiveStreams} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new LiveStreams('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {LiveStreams} */\n    it('creates a new LiveStreams instance', () => {\n      const TestLiveStreams = new LiveStreams(testApiKey, testSecret);\n      expect(() => new LiveStreams(testApiKey, testSecret)).to.not.throw();\n      expect(TestLiveStreams.tokenId).to.equal(testApiKey);\n      expect(TestLiveStreams.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {LiveStreams.del} */\n  describe('LiveStreams.del', () => {\n    /** @test {LiveStreams.del} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .del()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a live stream'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.list} */\n  describe('LiveStreams.list', () => {\n    /** @test {LiveStreams.list} */\n    it('makes a GET request to list 100 live streams offset by 2 pages', (done) => {\n      moxios.stubRequest('/video/v1/live-streams?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testLiveStreams.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n\n  /** @test {LiveStreams.get} */\n  describe('LiveStreams.get', () => {\n    /** @test {LiveStreams.get} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to get a live stream'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.signalComplete} */\n  describe('LiveStreams.signalComplete', () => {\n    /** @test {LiveStreams.signalComplete} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .signalComplete()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to signal a stream is complete'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.resetStreamKey} */\n  describe('LiveStreams.resetStreamKey', () => {\n    /** @test {LiveStreams.resetStreamKey} */\n    it('throws an error when a live stream ID is not given', () =>\n      testLiveStreams\n        .resetStreamKey()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to reset a live stream key'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.createPlaybackId} */\n  describe('LiveStreams.createPlaybackId', () => {\n    /** @test {LiveStreams.createPlaybackId} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .createPlaybackId()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to create a live stream playback ID'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.deletePlaybackId} */\n  describe('LiveStreams.deletePlaybackId', () => {\n    /** @test {LiveStreams.deletePlaybackId} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .deletePlaybackId()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a live stream playback ID'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.createSimulcastTarget} */\n  describe('LiveStreams.createSimulcastTarget', () => {\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .createSimulcastTarget()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to create a simulcast target'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.getSimulcastTarget} */\n  describe('LiveStreams.getSimulcastTarget', () => {\n    /** @test {LiveStreams.getSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .getSimulcastTarget()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to get a simulcast target'\n          );\n        }));\n\n    /** @test {LiveStreams.createSimulcastTarget} */\n    it('throws an error if a simulcast target id is not given', () =>\n      testLiveStreams\n        .getSimulcastTarget('testLiveStream')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A simulcast target ID is required to get a simulcast target'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.deleteSimulcastTarget} */\n  describe('LiveStreams.deleteSimulcastTarget', () => {\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .deleteSimulcastTarget()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to delete a simulcast target'\n          );\n        }));\n\n    /** @test {LiveStreams.deleteSimulcastTarget} */\n    it('throws an error if a simulcast target id is not given', () =>\n      testLiveStreams\n        .deleteSimulcastTarget('testLiveStream')\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A simulcast target ID is required to delete a simulcast target'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.enable} */\n  describe('LiveStreams.enable', () => {\n    /** @test {LiveStreams.enable} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .enable()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to enable a live stream'\n          );\n        }));\n  });\n\n  /** @test {LiveStreams.disable} */\n  describe('LiveStreams.disable', () => {\n    /** @test {LiveStreams.disable} */\n    it('throws an error if a live stream ID is not given', () =>\n      testLiveStreams\n        .disable()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'A live stream ID is required to disable a live stream'\n          );\n        }));\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/liveStreams.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "describe251",
    "testId": 251,
    "memberof": "test/unit/video/resources/liveStreams.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "access": null,
    "description": "Unit::LiveStreams",
    "lineNumber": 9,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe252",
    "testId": 252,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252",
    "access": null,
    "description": "LiveStreams",
    "lineNumber": 23,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252.it253",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 25,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252.it254",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 32,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe252.it255",
    "access": null,
    "description": "creates a new LiveStreams instance",
    "lineNumber": 39,
    "testTargets": [
      "LiveStreams"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe256",
    "testId": 256,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe256",
    "access": null,
    "description": "LiveStreams.del",
    "lineNumber": 48,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe256",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe256.it257",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 50,
    "testTargets": [
      "LiveStreams.del"
    ]
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "describe258",
    "testId": 258,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe258",
    "access": null,
    "description": "LiveStreams.list",
    "lineNumber": 65,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe258",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe258.it259",
    "access": null,
    "description": "makes a GET request to list 100 live streams offset by 2 pages",
    "lineNumber": 67,
    "testTargets": [
      "LiveStreams.list"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe260",
    "testId": 260,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe260",
    "access": null,
    "description": "LiveStreams.get",
    "lineNumber": 84,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe260.it261",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 86,
    "testTargets": [
      "LiveStreams.get"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe262",
    "testId": 262,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe262",
    "access": null,
    "description": "LiveStreams.signalComplete",
    "lineNumber": 101,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe262",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe262.it263",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 103,
    "testTargets": [
      "LiveStreams.signalComplete"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe264",
    "testId": 264,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe264",
    "access": null,
    "description": "LiveStreams.resetStreamKey",
    "lineNumber": 118,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe264",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe264.it265",
    "access": null,
    "description": "throws an error when a live stream ID is not given",
    "lineNumber": 120,
    "testTargets": [
      "LiveStreams.resetStreamKey"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe266",
    "testId": 266,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe266",
    "access": null,
    "description": "LiveStreams.createPlaybackId",
    "lineNumber": 135,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe266.it267",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 137,
    "testTargets": [
      "LiveStreams.createPlaybackId"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "describe268",
    "testId": 268,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe268",
    "access": null,
    "description": "LiveStreams.deletePlaybackId",
    "lineNumber": 152,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe268.it269",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 154,
    "testTargets": [
      "LiveStreams.deletePlaybackId"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe270",
    "testId": 270,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe270",
    "access": null,
    "description": "LiveStreams.createSimulcastTarget",
    "lineNumber": 169,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe270",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe270.it271",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 171,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe272",
    "testId": 272,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe272",
    "access": null,
    "description": "LiveStreams.getSimulcastTarget",
    "lineNumber": 186,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe272",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe272.it273",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 188,
    "testTargets": [
      "LiveStreams.getSimulcastTarget"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe272",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe272.it274",
    "access": null,
    "description": "throws an error if a simulcast target id is not given",
    "lineNumber": 202,
    "testTargets": [
      "LiveStreams.createSimulcastTarget"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "describe275",
    "testId": 275,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe275",
    "access": null,
    "description": "LiveStreams.deleteSimulcastTarget",
    "lineNumber": 217,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe275",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe275.it276",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 219,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe275",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe275.it277",
    "access": null,
    "description": "throws an error if a simulcast target id is not given",
    "lineNumber": 233,
    "testTargets": [
      "LiveStreams.deleteSimulcastTarget"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe278",
    "testId": 278,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe278",
    "access": null,
    "description": "LiveStreams.enable",
    "lineNumber": 248,
    "testTargets": [
      "LiveStreams.enable"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it279",
    "testId": 279,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe278",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe278.it279",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 250,
    "testTargets": [
      "LiveStreams.enable"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe280",
    "testId": 280,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe280",
    "access": null,
    "description": "LiveStreams.disable",
    "lineNumber": 265,
    "testTargets": [
      "LiveStreams.disable"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "test/unit/video/resources/liveStreams.spec.js~describe251.describe280",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/liveStreams.spec.js~describe251.describe280.it281",
    "access": null,
    "description": "throws an error if a live stream ID is not given",
    "lineNumber": 267,
    "testTargets": [
      "LiveStreams.disable"
    ]
  },
  {
    "__docId__": 357,
    "kind": "testFile",
    "name": "test/unit/video/resources/playbackIds.spec.js",
    "content": "const { expect } = require('chai');\nconst moxios = require('moxios');\nconst { PlaybackIds } = require('../../../../dist/video/resources/playbackIds');\n\n/** @test {PlaybackIds} */\ndescribe('Unit::PlaybackIds', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testPlaybackIds = new PlaybackIds(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testPlaybackIds.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testPlaybackIds.http);\n  });\n\n  /** @test {PlaybackIds} */\n  describe('PlaybackIds', () => {\n    /** @test {PlaybackIds} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new PlaybackIds()).to.throw(\n        'API Access Token must be provided.'\n      );\n    });\n\n    /** @test {PlaybackIds} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new PlaybackIds('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {PlaybackIds} */\n    it('creates a new PlaybackIds instance', () => {\n      const TestPlaybackIds = new PlaybackIds(testApiKey, testSecret);\n      expect(() => new PlaybackIds(testApiKey, testSecret)).to.not.throw();\n      expect(TestPlaybackIds.tokenId).to.equal(testApiKey);\n      expect(TestPlaybackIds.tokenSecret).to.equal(testSecret);\n    });\n  });\n\n  /** @test {PlaybackIds.get} */\n  describe('PlaybackIds.get', () => {\n    /** @test {PlaybackIds.get} */\n    it('throws an error when an playback ID is not given', () =>\n      testPlaybackIds\n        .get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.equal(\n            'An playback ID is required to get an asset or live stream identifier'\n          );\n        }));\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/playbackIds.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "describe282",
    "testId": 282,
    "memberof": "test/unit/video/resources/playbackIds.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282",
    "access": null,
    "description": "Unit::PlaybackIds",
    "lineNumber": 8,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe283",
    "testId": 283,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283",
    "access": null,
    "description": "PlaybackIds",
    "lineNumber": 22,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283.it284",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 24,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283.it285",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 31,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it286",
    "testId": 286,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe283.it286",
    "access": null,
    "description": "creates a new PlaybackIds instance",
    "lineNumber": 38,
    "testTargets": [
      "PlaybackIds"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "describe287",
    "testId": 287,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe287",
    "access": null,
    "description": "PlaybackIds.get",
    "lineNumber": 47,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "test/unit/video/resources/playbackIds.spec.js~describe282.describe287",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/playbackIds.spec.js~describe282.describe287.it288",
    "access": null,
    "description": "throws an error when an playback ID is not given",
    "lineNumber": 49,
    "testTargets": [
      "PlaybackIds.get"
    ]
  },
  {
    "__docId__": 365,
    "kind": "testFile",
    "name": "test/unit/video/resources/signingKeys.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst { SigningKeys } = require('../../../../dist/video/resources/signingKeys');\n\n/** @test {SigningKeys} */\ndescribe('Unit::SigningKeys', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testSigningKeys = new SigningKeys(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testSigningKeys.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testSigningKeys.http);\n  });\n\n  /** @test {SigningKeys.get} */\n  describe('SigningKeys.get', () => {\n    /** @test {SigningKeys.get} */\n    it('throws an error when an key id is not given', () =>\n      testSigningKeys\n        .get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.include('An signing key ID is required.');\n        }));\n  });\n\n  /** @test {SigningKeys.del} */\n  describe('SigningKeys.del', () => {\n    /** @test {SigningKeys.del} */\n    it('throws an error when an key id is not given', () =>\n      testSigningKeys.del().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.include('An signing key ID is required.');\n      }));\n  });\n\n  /** @test {SigningKeys.list} */\n  describe('SigningKeys.list', () => {\n    /** @test {SigningKeys.list} */\n    it('makes a GET request to list 100 signing keys offset by 2 pages', (done) => {\n      moxios.stubRequest('/video/v1/signing-keys?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testSigningKeys.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/signingKeys.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "describe289",
    "testId": 289,
    "memberof": "test/unit/video/resources/signingKeys.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289",
    "access": null,
    "description": "Unit::SigningKeys",
    "lineNumber": 9,
    "testTargets": [
      "SigningKeys"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe290",
    "testId": 290,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe290",
    "access": null,
    "description": "SigningKeys.get",
    "lineNumber": 23,
    "testTargets": [
      "SigningKeys.get"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289.describe290",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe290.it291",
    "access": null,
    "description": "throws an error when an key id is not given",
    "lineNumber": 25,
    "testTargets": [
      "SigningKeys.get"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "describe292",
    "testId": 292,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe292",
    "access": null,
    "description": "SigningKeys.del",
    "lineNumber": 38,
    "testTargets": [
      "SigningKeys.del"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe292.it293",
    "access": null,
    "description": "throws an error when an key id is not given",
    "lineNumber": 40,
    "testTargets": [
      "SigningKeys.del"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "describe294",
    "testId": 294,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe294",
    "access": null,
    "description": "SigningKeys.list",
    "lineNumber": 48,
    "testTargets": [
      "SigningKeys.list"
    ]
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/unit/video/resources/signingKeys.spec.js~describe289.describe294",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/signingKeys.spec.js~describe289.describe294.it295",
    "access": null,
    "description": "makes a GET request to list 100 signing keys offset by 2 pages",
    "lineNumber": 50,
    "testTargets": [
      "SigningKeys.list"
    ]
  },
  {
    "__docId__": 373,
    "kind": "testFile",
    "name": "test/unit/video/resources/uploads.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst moxios = require('moxios');\nconst { Uploads } = require('../../../../dist/video/resources/uploads');\n\n/** @test {Uploads} */\ndescribe('Unit::Uploads', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n  const testUploads = new Uploads(testApiKey, testSecret);\n\n  beforeEach(() => {\n    moxios.install(testUploads.http);\n  });\n\n  afterEach(() => {\n    moxios.uninstall(testUploads.http);\n  });\n\n  /** @test {Uploads.create} */\n  describe('Uploads.create', () => {\n    /** @test {Uploads.create} */\n    it('throws an error if no params are given', () =>\n      testUploads.create().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.include('Params are required');\n      }));\n  });\n\n  /** @test {Uploads.get} */\n  describe('Uploads.get', () => {\n    /** @test {Uploads.get} */\n    it('throws an error when an upload id is not given', () =>\n      testUploads\n        .get()\n        .then((res) => {\n          expect(res).to.not.exist;\n        })\n        .catch((err) => {\n          expect(err).to.exist;\n          expect(err.message).to.include('An upload ID is required');\n        }));\n  });\n\n  /** @test {Uploads.cancel} */\n  describe('Uploads.cancel', () => {\n    /** @test {Uploads.del} */\n    it('throws an error when an upload id is not given', () =>\n      testUploads.cancel().catch((err) => {\n        expect(err).to.exist;\n        expect(err.message).to.include('An upload ID is required');\n      }));\n  });\n\n  /** @test {Uploads.list} */\n  describe('Uploads.list', () => {\n    /** @test {Uploads.list} */\n    it('makes a GET request to list 100 uploads offset by 2 pages', (done) => {\n      moxios.stubRequest('/video/v1/uploads?limit=100&page=2', {\n        status: 200,\n        responseText: '{\"data\": {\"list\": true}}',\n      });\n\n      const onFulfilled = sinon.spy();\n      testUploads.list({ limit: 100, page: 2 }).then(onFulfilled);\n\n      return moxios.wait(() => {\n        expect(onFulfilled.getCall(0).args[0].list).to.be.true;\n        done();\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/resources/uploads.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "describe296",
    "testId": 296,
    "memberof": "test/unit/video/resources/uploads.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296",
    "access": null,
    "description": "Unit::Uploads",
    "lineNumber": 9,
    "testTargets": [
      "Uploads"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe297",
    "testId": 297,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe297",
    "access": null,
    "description": "Uploads.create",
    "lineNumber": 23,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it298",
    "testId": 298,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296.describe297",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe297.it298",
    "access": null,
    "description": "throws an error if no params are given",
    "lineNumber": 25,
    "testTargets": [
      "Uploads.create"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe299",
    "testId": 299,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe299",
    "access": null,
    "description": "Uploads.get",
    "lineNumber": 33,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe299.it300",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 35,
    "testTargets": [
      "Uploads.get"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "describe301",
    "testId": 301,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe301",
    "access": null,
    "description": "Uploads.cancel",
    "lineNumber": 48,
    "testTargets": [
      "Uploads.cancel"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296.describe301",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe301.it302",
    "access": null,
    "description": "throws an error when an upload id is not given",
    "lineNumber": 50,
    "testTargets": [
      "Uploads.del"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "describe303",
    "testId": 303,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe303",
    "access": null,
    "description": "Uploads.list",
    "lineNumber": 58,
    "testTargets": [
      "Uploads.list"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/unit/video/resources/uploads.spec.js~describe296.describe303",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/resources/uploads.spec.js~describe296.describe303.it304",
    "access": null,
    "description": "makes a GET request to list 100 uploads offset by 2 pages",
    "lineNumber": 60,
    "testTargets": [
      "Uploads.list"
    ]
  },
  {
    "__docId__": 383,
    "kind": "testFile",
    "name": "test/unit/video/video.spec.js",
    "content": "const { expect } = require('chai');\nconst { Video } = require('../../../dist/video/video');\nconst { Assets } = require('../../../dist/video/resources/assets');\nconst { LiveStreams } = require('../../../dist/video/resources/liveStreams');\nconst { Uploads } = require('../../../dist/video/resources/uploads');\nconst { PlaybackIds } = require('../../../dist/video/resources/playbackIds');\nconst {\n  DeliveryUsage,\n} = require('../../../dist/video/resources/deliveryUsage');\nconst { SigningKeys } = require('../../../dist/video/resources/signingKeys');\n\n/** @test {Video} */\ndescribe('Unit::Video', () => {\n  const testApiKey = 'testApiKey';\n  const testSecret = 'testSecret';\n\n  /** @test {Video} */\n  describe('Video', () => {\n    /** @test {Video} */\n    it('throws an error if an api key is not given', () => {\n      expect(() => new Video()).to.throw('API Access Token must be provided.');\n    });\n\n    /** @test {Video} */\n    it('throws an error if a secret key is not given', () => {\n      expect(() => new Video('testKey')).to.throw(\n        'API secret key must be provided'\n      );\n    });\n\n    /** @test {Video} */\n    it('creates a new Video instance', () => {\n      const TestVideo = new Video(testApiKey, testSecret);\n      expect(() => new Video(testApiKey, testSecret)).to.not.throw();\n      expect(TestVideo.Assets).to.be.an.instanceof(Assets);\n      expect(TestVideo.LiveStreams).to.be.an.instanceof(LiveStreams);\n      expect(TestVideo.DeliveryUsage).to.be.an.instanceof(DeliveryUsage);\n      expect(TestVideo.PlaybackIds).to.be.an.instanceof(PlaybackIds);\n      expect(TestVideo.Uploads).to.be.an.instanceof(Uploads);\n      expect(TestVideo.SigningKeys).to.be.an.instanceof(SigningKeys);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/video/video.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "describe305",
    "testId": 305,
    "memberof": "test/unit/video/video.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe305",
    "access": null,
    "description": "Unit::Video",
    "lineNumber": 21,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe306",
    "testId": 306,
    "memberof": "test/unit/video/video.spec.js~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe305.describe306",
    "access": null,
    "description": "Video",
    "lineNumber": 26,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "test/unit/video/video.spec.js~describe305.describe306",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe305.describe306.it307",
    "access": null,
    "description": "throws an error if an api key is not given",
    "lineNumber": 28,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it308",
    "testId": 308,
    "memberof": "test/unit/video/video.spec.js~describe305.describe306",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe305.describe306.it308",
    "access": null,
    "description": "throws an error if a secret key is not given",
    "lineNumber": 33,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it309",
    "testId": 309,
    "memberof": "test/unit/video/video.spec.js~describe305.describe306",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/video/video.spec.js~describe305.describe306.it309",
    "access": null,
    "description": "creates a new Video instance",
    "lineNumber": 40,
    "testTargets": [
      "Video"
    ]
  },
  {
    "__docId__": 389,
    "kind": "testFile",
    "name": "test/unit/webhooks/resources/verify_header.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst {\n  VerifyHeader,\n} = require('../../../../dist/webhooks/resources/verify_header');\n\n/** @test {VerifyHeader} */\ndescribe('Unit::VerifyHeader', () => {\n  /** @test {VerifyHeader} */\n  describe('VerifyHeader', () => {\n    /** @test {VerifyHeader.parseHeader} */\n    describe('parseHeader with a known-hard coded header value', () => {\n      it('will correctly parse the header value to the known timestamp and signature', () => {\n        /*\n          This header value was generated from Mux's backend code with the following values:\n            * secret: 'SuperSecret123'\n            * body: \"{\\\"test\\\":\\\"body\\\"}\"\n            * time: 1565125718 (08/06/2019 @ 9:08pm UTC)\n        */\n        const header =\n          't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n        const expectedSignature =\n          '854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n        const parsed = VerifyHeader.parseHeader(header);\n        expect(parsed.timestamp).to.equal(1565125718);\n        expect(parsed.signatures.length).to.equal(1);\n        expect(parsed.signatures[0]).to.equal(expectedSignature);\n      });\n    });\n\n    /** @test {VerifyHeader.verify} */\n    describe('verify', () => {\n      let payload = '{\"test\":\"body\"}';\n      const secret = 'SuperSecret123';\n      const validTimeSec = 1565125718;\n      const validHeaderAtTheTime =\n        't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a malformatted header value', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw an unable to extract timestamp and signatures error', () => {\n          expect(() => {\n            VerifyHeader.verify(payload, 'somebadheadervalue', secret);\n          }).to.throw('Unable to extract timestamp and signatures from header');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that has the wrong scheme', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw a no signatures found with expected scheme error', () => {\n          expect(() => {\n            const header = 't=1565125718,v2=weiorwer';\n            VerifyHeader.verify(payload, header, secret);\n          }).to.throw('No signatures found with expected scheme');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that is valid expect that it is outside the tolerated time range', () => {\n        /** @test {VerifyHeader.verify} */\n        it('will throw a timestamp outside the tolerance zone error', () => {\n          expect(() => {\n            VerifyHeader.verify(payload, validHeaderAtTheTime, secret);\n          }).to.throw('Timestamp outside the tolerance zone');\n        });\n      });\n\n      /** @test {VerifyHeader.verify} */\n      describe('with a header value that is actually valid', () => {\n        let clock;\n\n        beforeEach(() => {\n          clock = sinon.useFakeTimers(new Date(validTimeSec * 1000));\n        });\n\n        afterEach(() => clock.restore());\n\n        /** @test {VerifyHeader.verify} */\n        it('will return true when the payload is a string', () => {\n          const isVerified = VerifyHeader.verify(\n            payload,\n            validHeaderAtTheTime,\n            secret\n          );\n          expect(isVerified).to.be.true;\n        });\n\n        /** @test {VerifyHeader.verify} */\n        it('will return true when the payload is a buffer', () => {\n          payload = Buffer.from(payload);\n          const isVerified = VerifyHeader.verify(\n            payload,\n            validHeaderAtTheTime,\n            secret\n          );\n          expect(isVerified).to.be.true;\n        });\n      });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/webhooks/resources/verify_header.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "describe310",
    "testId": 310,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310",
    "access": null,
    "description": "Unit::VerifyHeader",
    "lineNumber": 10,
    "testTargets": [
      "VerifyHeader"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe311",
    "testId": 311,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311",
    "access": null,
    "description": "VerifyHeader",
    "lineNumber": 12,
    "testTargets": [
      "VerifyHeader"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "describe312",
    "testId": 312,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe312",
    "access": null,
    "description": "parseHeader with a known-hard coded header value",
    "lineNumber": 14,
    "testTargets": [
      "VerifyHeader.parseHeader"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe312",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe312.it313",
    "access": null,
    "description": "will correctly parse the header value to the known timestamp and signature",
    "lineNumber": 15
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "describe314",
    "testId": 314,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314",
    "access": null,
    "description": "verify",
    "lineNumber": 34,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "describe315",
    "testId": 315,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe315",
    "access": null,
    "description": "with a malformatted header value",
    "lineNumber": 42,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it316",
    "testId": 316,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe315",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe315.it316",
    "access": null,
    "description": "will throw an unable to extract timestamp and signatures error",
    "lineNumber": 44,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "describe317",
    "testId": 317,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe317",
    "access": null,
    "description": "with a header value that has the wrong scheme",
    "lineNumber": 52,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe317",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe317.it318",
    "access": null,
    "description": "will throw a no signatures found with expected scheme error",
    "lineNumber": 54,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "describe319",
    "testId": 319,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe319",
    "access": null,
    "description": "with a header value that is valid expect that it is outside the tolerated time range",
    "lineNumber": 63,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it320",
    "testId": 320,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe319",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe319.it320",
    "access": null,
    "description": "will throw a timestamp outside the tolerance zone error",
    "lineNumber": 65,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "describe321",
    "testId": 321,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe321",
    "access": null,
    "description": "with a header value that is actually valid",
    "lineNumber": 73,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe321",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe321.it322",
    "access": null,
    "description": "will return true when the payload is a string",
    "lineNumber": 83,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe321",
    "testDepth": 4,
    "static": true,
    "longname": "test/unit/webhooks/resources/verify_header.spec.js~describe310.describe311.describe314.describe321.it323",
    "access": null,
    "description": "will return true when the payload is a buffer",
    "lineNumber": 93,
    "testTargets": [
      "VerifyHeader.verify"
    ]
  },
  {
    "__docId__": 404,
    "kind": "testFile",
    "name": "test/unit/webhooks/webhooks.spec.js",
    "content": "const { expect } = require('chai');\nconst sinon = require('sinon');\nconst { Webhooks } = require('../../../dist/webhooks/webhooks');\n\n/** @test {Webhooks} */\ndescribe('Unit::Webhooks', () => {\n  /** @test {Webhooks.verifyHeader} */\n  describe('verifyHeader', () => {\n    const payload = '{\"test\":\"body\"}';\n    const secret = 'SuperSecret123';\n    const validTimeSec = 1565125718;\n    const validHeaderAtTheTime =\n      't=1565125718,v1=854ece4c22acef7c66b57d4e504153bc512595e8e9c772ece2a68150548c19a7';\n    let clock;\n\n    beforeEach(() => {\n      clock = sinon.useFakeTimers(new Date(validTimeSec * 1000));\n    });\n\n    afterEach(() => clock.restore());\n\n    /** @test {Webhooks.verifyHeader} */\n    it('returns true for a valid header', () => {\n      expect(Webhooks.verifyHeader(payload, validHeaderAtTheTime, secret)).to.be\n        .true;\n    });\n  });\n});\n",
    "static": true,
    "longname": "/home/runner/work/mux-node-sdk/mux-node-sdk/test/unit/webhooks/webhooks.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "describe324",
    "testId": 324,
    "memberof": "test/unit/webhooks/webhooks.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe324",
    "access": null,
    "description": "Unit::Webhooks",
    "lineNumber": 8,
    "testTargets": [
      "Webhooks"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe325",
    "testId": 325,
    "memberof": "test/unit/webhooks/webhooks.spec.js~describe324",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe324.describe325",
    "access": null,
    "description": "verifyHeader",
    "lineNumber": 10,
    "testTargets": [
      "Webhooks.verifyHeader"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "test/unit/webhooks/webhooks.spec.js~describe324.describe325",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/webhooks/webhooks.spec.js~describe324.describe325.it326",
    "access": null,
    "description": "returns true for a valid header",
    "lineNumber": 25,
    "testTargets": [
      "Webhooks.verifyHeader"
    ]
  }
]